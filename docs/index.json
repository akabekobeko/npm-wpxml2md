[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/bin/cli.js",
    "content": "import Path from 'path'\nimport WpXml2Md from '../lib/index.js'\n\n/**\n * Help text.\n * @type {String}\n */\nconst HelpText = `\nUsage: wpxml2md [OPTIONS]\n\n  Convert the WordPress XML file to Markdown files.\n\n  Options:\n    -h, --help            Display this text.\n    -v, --version         Display the version number.\n    -i, --input           Path of the XML file exported from WordPress.\n    -o, --output          Path of the output directory.\n    -r, --report          Output process reports.\n    --no-gfm              Disable the GitHub Flavored Markdown.\n    --no-melink           Disable the Markdown Extra link on header.\n    --with-metadata       Enable output article metadata.\n    --with-image-download Enable download and replace link syntaxes a linked images from article.\n    --with-comment        Enable comment output from article.\n    --replace-link-prefix Replace the link URL prefix with the specified word, format is \"target=placeholder\".\n                          If \"--replace-link http://example.com/=/\" then \"http://example.com/\" will be replaced with \"/\".\n\n  Examples:\n    $ wpxml2md -i wordpress.xml -o ./dist -r\n    $ wpxml2md -i wordpress.xml -o ./dist -r --with-metadata --with-image-download --with-comment --replace-link-prefix http://akabeko.me/=/\n\n  See also:\n    https://github.com/akabekobeko/npm-wpxml2md\n`\n\n/**\n * CLI options.\n * @type {Object}\n */\nconst Options = {\n  help: { name: '--help', shortName: '-h' },\n  version: { name: '--version', shortName: '-v' },\n  input: { name: '--input', shortName: '-i' },\n  output: { name: '--output', shortName: '-o' },\n  report: { name: '--report', shortName: '-r' },\n  noGFM: { name: '--no-gfm' },\n  noMELink: { name: '--no-melink' },\n  withMetadata: { name: '--with-metadata' },\n  withImageDownload: { name: '--with-image-download' },\n  withComment: { name: '--with-comment' },\n  replaceLinkPrefix: { name: '--replace-link-prefix' }\n}\n\n/**\n * Check that it is an option value.\n *\n * @param {String} value Value.\n *\n * @return {Boolean} If the option of the value \"true\".\n */\nconst isValue = (value) => {\n  const keys = Object.keys(Options)\n  return !(keys.some((key) => value === Options[key].name || value === Options[key].shortName))\n}\n\n/**\n * Parse for option value.\n *\n * @param {String[]} argv Arguments of the command line.\n * @param {Number} index Index of argumens.\n *\n * @return {String} Its contents if the option value, otherwise null.\n */\nconst parseArgValue =  (argv, index) => {\n  if (!(index + 1 < argv.length)) {\n    return null\n  }\n\n  const value = argv[index + 1]\n  return (isValue(value) ? value : null)\n}\n\n/**\n * Parse for the link option.\n *\n * @param {String} value Option value.\n *\n * @return {Object} Replace targets.\n */\nconst parseReplaceLinkURL = (value) => {\n  const units = value.split('=')\n  if (units.length < 2) {\n    return { old: '', new: '' }\n  }\n\n  return { old: units[0], new: units[1] }\n}\n\n/**\n * Parse for the command line argumens.\n *\n * @param {String[]} argv Arguments of the command line.\n *\n * @return {CLIOptions} Parse results.\n */\nconst parseArgv = (argv) => {\n  const options = {}\n  let   value   = null\n\n  argv.forEach((arg, index) => {\n    switch (arg) {\n      case Options.input.name:\n      case Options.input.shortName:\n        value = parseArgValue(argv, index)\n        if (value) {\n          options.input = Path.resolve(value)\n        }\n        break\n\n      case Options.output.name:\n      case Options.output.shortName:\n        value = parseArgValue(argv, index)\n        if (value) {\n          options.output = Path.resolve(value)\n        }\n        break\n\n      case Options.report.name:\n      case Options.report.shortName:\n        options.report = true\n        break\n\n      case Options.noGFM.name:\n        options.noGFM = true\n        break\n\n      case Options.noMELink.name:\n        options.noMELink = true\n        break\n\n      case Options.withMetadata.name:\n        options.withMetadata = true\n        break\n\n      case Options.withImageDownload.name:\n        options.withImageDownload = true\n        break\n\n      case Options.withComment.name:\n        options.withComment = true\n        break\n\n      case Options.replaceLinkPrefix.name:\n        value = parseArgValue(argv, index)\n        if (value) {\n          options.replaceLinkPrefix = parseReplaceLinkURL(value)\n        }\n        break\n\n      default:\n        break\n    }\n  })\n\n  return options\n}\n\n/**\n * Parse for the command line arguments.\n *\n * @param {String[]} argv Arguments of the command line.\n *\n * @return {CLIOptions} Parse results.\n */\nconst parseOption = (argv) => {\n  if (!(argv && 0 < argv.length)) {\n    return { help: true }\n  }\n\n  switch (argv[0]) {\n    case Options.help.name:\n    case Options.help.shortName:\n      return { help: true }\n\n    case Options.version.name:\n    case Options.version.shortName:\n      return { version: true }\n\n    default:\n      return parseArgv(argv)\n  }\n}\n\n/**\n * Print a help text.\n *\n * @param {WritableStream} stdout Standard output.\n */\nconst printHelp = (stdout) => {\n  stdout.write(HelpText)\n}\n\n/**\n * Print a version number.\n *\n * @param {WritableStream} stdout Standard output.\n */\nconst printVersion = (stdout) => {\n  const read = (path) => {\n    try {\n      return require(path).version\n    } catch (err) {\n      return null\n    }\n  }\n\n  const version = read('../package.json') || read('../../package.json')\n  stdout.write('v' + version + '\\n')\n}\n\n/**\n * Entry point of the CLI.\n *\n * @param {String[]} argv Arguments of the command line.\n * @param {WritableStream} stdout Standard output.\n *\n * @return {Promise} Asynchronous task.\n */\nconst CLI = (argv, stdout) => {\n  return new Promise((resolve, reject) => {\n    const options = parseOption(argv)\n    if (options.help) {\n      printHelp(stdout)\n      return resolve()\n    }\n\n    if (options.version) {\n      printVersion(stdout)\n      return resolve()\n    }\n\n    if (!(options.input)) {\n      return reject(new Error('\"-i\" or \"--input\" has not been specified. This parameter is required.'))\n    }\n\n    if (!(options.output)) {\n      return reject(new Error('\"-o\" or \"--output\" has not been specified. This parameter is required.'))\n    }\n\n    return WpXml2Md(options.input, options.output, options)\n  })\n}\n\nexport default CLI\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/bin/cli.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "HelpText",
    "memberof": "src/bin/cli.js",
    "static": true,
    "longname": "src/bin/cli.js~HelpText",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Help text.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "Options",
    "memberof": "src/bin/cli.js",
    "static": true,
    "longname": "src/bin/cli.js~Options",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "CLI options.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "isValue",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~isValue",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "parseArgValue",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~parseArgValue",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Parse for option value.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "Arguments of the command line."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index of argumens."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Its contents if the option value, otherwise null."
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "parseReplaceLinkURL",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~parseReplaceLinkURL",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Parse for the link option.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Option value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Replace targets."
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "parseArgv",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~parseArgv",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Parse for the command line argumens.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "Arguments of the command line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CLIOptions"
      ],
      "spread": false,
      "description": "Parse results."
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "parseOption",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~parseOption",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Parse for the command line arguments.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "Arguments of the command line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CLIOptions"
      ],
      "spread": false,
      "description": "Parse results."
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "printHelp",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~printHelp",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Print a help text.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "WritableStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stdout",
        "description": "Standard output."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "printVersion",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~printVersion",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": null,
    "description": "Print a version number.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "WritableStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stdout",
        "description": "Standard output."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "CLI",
    "memberof": "src/bin/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/bin/cli.js~CLI",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/bin/cli.js",
    "importStyle": "CLI",
    "description": "Entry point of the CLI.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "Arguments of the command line."
      },
      {
        "nullable": null,
        "types": [
          "WritableStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stdout",
        "description": "Standard output."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Asynchronous task."
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/bin/index.js",
    "content": "#!/usr/bin/env node\n\nimport CLI from './cli.js'\n\nCLI(process.argv.slice(2), process.stdout)\n  .catch((err) => {\n    console.error(err)\n  })\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/bin/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/lib/comment.js",
    "content": "import MD5 from 'md5'\nimport Util from './util.js'\n\n/**\n * Create a Markdown image link (Gravatar) from e-mail address.\n * @param {String} author Author.\n * @param {String} mail Mail e-mail address.\n * @return {String} Markdown text.\n */\nconst createIconLink = (author, mail) => {\n  return mail ? `![${author}](https://www.gravatar.com/avatar/${MD5(mail)}?d=identicon) ` : ''\n}\n\n/**\n * Create a Markdown text of author.\n * @param {String} author Author.\n * @param {String} url URL of author web site.\n * @return {String} Markdown text.\n */\nconst createAuthor = (author, url) => {\n  return url ? `[${author}](${url})` : author\n}\n\n/**\n * Create a datetime text.\n * @param {Object} date Datetime\n * @return {String} Markdown text.\n */\nconst createDate = (date) => {\n  return date ? `${date.year}-${date.month}-${date.day}T${date.time}Z` : ''\n}\n\n/**\n * Convert a content of comment to indented markdown code block.\n * @param {String} content Content of comment.\n * @return markdown code block.\n */\nconst convertBody = (content) => {\n  return content.replace(/^/mg, '  > ')\n}\n\n/**\n * Convert a comments to Markdown.\n * @param {Object[]} comments Comments.\n * @return {String} Markdown text.\n */\nconst convertMarkdown = (comments) => {\n  if (!(comments && 0 < comments.length)) {\n    return ''\n  }\n\n  let md = ''\n  for (let comment of comments) {\n    const body = convertBody(comment.content)\n    md += `* ${createIconLink(comment.author, comment.mail)}**${createAuthor(comment.author, comment.url)}** ${createDate(comment.date)}\\n${body}\\n`\n    if (comment.children) {\n      md += convertMarkdown(comment.children)\n    }\n  }\n\n  return md\n}\n\n/**\n * Crerate a comment tree with parent identifier.\n * @param {Object[]} comments Comments.\n * @return {Object[]} Parsed comments.\n */\nconst createCommentTree = (comments) => {\n  const tree = []\n  if (!(Array.isArray(comments))) {\n    return tree\n  }\n\n  // Identifier mapping and deep copy\n  const map = {}\n  const list = []\n  for (let i = 0; i < comments.length; ++i) {\n    const comment = comments[i]\n    map[comment.id] = i\n    list.push(Object.assign({}, comment))\n  }\n\n  for (let i = 0; i < list.length; ++i) {\n    const comment = list[i]\n    if (comment.parent && comment.parent !== '0') {\n      const parent = list[map[comment.parent]]\n      if (parent.children) {\n        parent.children.push(comment)\n      } else {\n        parent.children = [comment]\n      }\n    } else {\n      // Root\n      tree.push(comment)\n    }\n  }\n\n  return tree\n}\n\n/**\n * Parse a comments..\n * @param {Object[]} src Comments (wp:comment).\n * @return {Object[]} Parsed comments.\n */\nconst parse = (src) => {\n  const comments = []\n  if (!(Array.isArray(src))) {\n    return comments\n  }\n\n  for (let comment of src) {\n    comments.push({\n      id: comment['wp:comment_id'][0],\n      author: comment['wp:comment_author'][0],\n      mail: comment['wp:comment_author_email'][0],\n      url: comment['wp:comment_author_url'][0],\n      date: Util.datetimeFromWpGMT(comment['wp:comment_date_gmt'][0]),\n      content: comment['wp:comment_content'][0],\n      parent: comment['wp:comment_parent'][0]\n    })\n  }\n\n  return comments\n}\n\n/**\n * Create a comment list.\n * @param {Object[]} src Comments (wp:comment).\n * @return {String} Comment list (HTML text).\n */\nconst Comment = (src) => {\n  const comments = createCommentTree(parse(src))\n  if (comments.length === 0) {\n    return ''\n  }\n\n  return `\\n\\n## Comments from WordPress\\n\\n${convertMarkdown(comments)}`\n}\n\nexport default Comment\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/comment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "createIconLink",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~createIconLink",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Create a Markdown image link (Gravatar) from e-mail address.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "author",
        "description": "Author."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "mail",
        "description": "Mail e-mail address."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Markdown text."
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "createAuthor",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~createAuthor",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Create a Markdown text of author.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "author",
        "description": "Author."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "URL of author web site."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Markdown text."
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "createDate",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~createDate",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Create a datetime text.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Datetime"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Markdown text."
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "convertBody",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~convertBody",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Convert a content of comment to indented markdown code block.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Content of comment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "markdown code block."
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "convertMarkdown",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~convertMarkdown",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Convert a comments to Markdown.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "comments",
        "description": "Comments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Markdown text."
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "createCommentTree",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~createCommentTree",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Crerate a comment tree with parent identifier.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "comments",
        "description": "Comments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "Parsed comments."
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "parse",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~parse",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": null,
    "description": "Parse a comments..",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Comments (wp:comment)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "Parsed comments."
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "Comment",
    "memberof": "src/lib/comment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/comment.js~Comment",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/comment.js",
    "importStyle": "Comment",
    "description": "Create a comment list.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Comments (wp:comment)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Comment list (HTML text)."
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/lib/converter.js",
    "content": "import { JSDOM } from 'jsdom'\nimport CollapseWhitespace from 'collapse-whitespace'\nimport Util from './util.js'\nimport ConvertShortCode from './shortcode.js'\nimport MarkdownConverters from './markdown.js'\nimport GfmConverters from './gfm.js'\n\n/**\n * Types of node.\n * @type {Object}\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n */\nconst NodeTypes = {\n  ELEMENT_NODE: 1,\n  TEXT_NODE: 3\n}\n\n/**\n * RegExp.\n * @type {Object}\n */\nconst RegExps = {\n  Alphabet: /A/,\n  Space: /^\\s*$/i,\n  Leading: /^[ \\r\\n\\t]/,\n  Trailing: /[ \\r\\n\\t]$/\n}\n\n/**\n * Check that conversion is possible.\n *\n * @param {Node} node DOM node.\n * @param {String|String[]|Function} filter Filter.\n *\n * @return {Boolean} \"true\" if the conversion is possible.\n */\nconst canConvert = (node, filter) => {\n  if (typeof filter === 'string') {\n    return (filter === node.nodeName.toLowerCase())\n  }\n\n  if (Array.isArray(filter)) {\n    return (filter.indexOf(node.nodeName.toLowerCase()) !== -1)\n  } else if (typeof filter === 'function') {\n    return filter(node)\n  }\n\n  throw new TypeError('\"filter\" needs to be a string, array, or function')\n}\n\n/**\n * Collapse the whitespace from ELEMENT_NODE node.\n * TEXT_NODE will keep the original indentation and whitespace.\n *\n * @param {Node[]} nodes DOM nodes.\n */\nconst collapseWhitespace = (nodes) => {\n  nodes.forEach((node) => {\n    if (node.nodeType === NodeTypes.ELEMENT_NODE) {\n      CollapseWhitespace(node, Util.isBlockElement)\n    }\n  })\n}\n\n/**\n * Flanking the whitespaces.\n *\n * @param {Node} node DOM node.\n *\n * @return {Object} whitespaces.\n */\nconst flankingWhitespace = (node) => {\n  let leading  = ''\n  let trailing = ''\n\n  if (!(Util.isBlockElement(node))) {\n    const hasLeading  = RegExps.Leading.test(node.innerHTML)\n    const hasTrailing = RegExps.Trailing.test(node.innerHTML)\n    if (hasLeading && !(isFlankedByWhitespace('left', node))) {\n      leading = ' '\n    }\n\n    if (hasTrailing && !(isFlankedByWhitespace('right', node))) {\n      trailing = ' '\n    }\n  }\n\n  return { leading: leading, trailing: trailing }\n}\n\n/**\n * Flattens the tree structure of nodes.\n *\n * @param {Node} node DOM node.\n *\n * @return {Node[]} Nodes.\n */\nconst flattenNodes = (node) =>  {\n  const inqueue  = [node]\n  const outqueue = []\n\n  while (0 < inqueue.length) {\n    const elm = inqueue.shift()\n    outqueue.push(elm)\n\n    for (let i = 0, max = elm.childNodes.length; i < max; ++i) {\n      const child = elm.childNodes[i]\n      if (child.nodeType === NodeTypes.ELEMENT_NODE) {\n        inqueue.push(child)\n      }\n    }\n  }\n\n  // Remove root\n  outqueue.shift()\n\n  return outqueue\n}\n\n/**\n * Get a child contents text.\n *\n * @param {Node} node DOM node.\n *\n * @return {String} Text.\n */\nconst getContent = (node) => {\n  let text = ''\n  for (let i = 0, max = node.childNodes.length; i < max; ++i) {\n    const elm = node.childNodes[i]\n    if (elm.nodeType === NodeTypes.ELEMENT_NODE) {\n      text += node.childNodes[i]._replacement\n    } else if (elm.nodeType === NodeTypes.TEXT_NODE) {\n      text += elm.data\n    }\n  }\n\n  return text\n}\n\n/**\n * Prepare the text for parse the jsdom.\n *\n * @param {String} text Text.\n *\n * @return {String} Prepared text.\n */\nconst prepareText = (text) => {\n  const result = ConvertShortCode(text)\n\n  // Escape number list\n  return result.replace(/(\\d+)\\. /g, '$1\\\\. ')\n}\n\n/**\n * Check a flanked by whitespace.\n *\n * @param {String} side\n * @param {Node} node Node.\n *\n * @return {Boolean} Flanked if \"true\".\n */\nconst isFlankedByWhitespace = (side, node) => {\n  let sibling = null\n  let regexp  = null\n  if (side === 'left') {\n    sibling = node.previousSibling\n    regexp  = / $/\n  } else {\n    sibling = node.nextSibling\n    regexp  = /^ /\n  }\n\n  let isFlanked = false\n  if (sibling) {\n    if (sibling.nodeType === NodeTypes.TEXT_NODE) {\n      isFlanked = regexp.test(sibling.nodeValue)\n    } else if (sibling.nodeType === NodeTypes.ELEMENT_NODE && !(Util.isBlockElement(sibling))) {\n      isFlanked = regexp.test(sibling.textContent)\n    }\n  }\n\n  return isFlanked\n}\n\n/**\n * Convert the Node to Markdown text.\n *\n * @param {Node} node DOM node.\n * @param {Converter[]} converters Converters.\n * @param {Modes} modes Modes.\n */\nconst process = (node, converters, modes) => {\n  let content = getContent(node)\n\n  // Remove blank nodes\n  if (!(Util.isVoidElement(node)) && RegExps.Alphabet.test(node.nodeName) && RegExps.Space.test(content)) {\n    node._replacement = ''\n    return\n  }\n\n  let replacement = ''\n  converters.some((converter) => {\n    if (!(canConvert(node, converter.filter))) {\n      return false\n    }\n\n    if (typeof converter.replacement !== 'function') {\n      throw new TypeError('\"replacement\" needs to be a function that returns a string')\n    }\n\n    const whitespace = flankingWhitespace(node)\n    if (whitespace.leading || whitespace.trailing) {\n      content = Util.trim(content)\n    }\n\n    replacement = whitespace.leading +\n                  converter.replacement(node, content, modes) +\n                  whitespace.trailing\n\n    return true\n  })\n\n  node._replacement = replacement\n}\n\n/**\n * Convert the WordPress's post to Markdown.\n * Design and implementation was in reference to the npm to-markdown.\n *\n * @param {String} post WordPress's post text.\n * @param {Modes} modes Modes.\n *\n * @return {String} Markdown text.\n *\n * @see https://github.com/domchristie/to-markdown\n */\nconst Convert = (post, modes = {}) => {\n  if (typeof post !== 'string') {\n    throw new TypeError('\"post\" is not a string.')\n  }\n\n  let converters = MarkdownConverters.slice(0)\n  if (!(modes.noGFM)) {\n    converters = GfmConverters.concat(converters)\n  }\n\n  const body  = (new JSDOM(prepareText(post))).window.document.body\n  const nodes = flattenNodes(body)\n  collapseWhitespace(nodes)\n\n  // Process through nodes in reverse (so deepest child elements are first).\n  for (let i = nodes.length - 1; 0 <= i; --i) {\n    process(nodes[i], converters, modes)\n  }\n\n  const result = getContent(body)\n  return result.replace(/^[\\t\\r\\n]+|[\\t\\r\\n\\s]+$/g, '')\n    .replace(/\\n\\s+\\n/g, '\\n\\n')\n    .replace(/\\n{3,}/g, '\\n\\n')\n}\n\nexport default Convert\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/converter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "NodeTypes",
    "memberof": "src/lib/converter.js",
    "static": true,
    "longname": "src/lib/converter.js~NodeTypes",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Types of node.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType"
    ],
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "RegExps",
    "memberof": "src/lib/converter.js",
    "static": true,
    "longname": "src/lib/converter.js~RegExps",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"Alphabet\": *, \"Space\": *, \"Leading\": *, \"Trailing\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "canConvert",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~canConvert",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "filter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "collapseWhitespace",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~collapseWhitespace",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Collapse the whitespace from ELEMENT_NODE node.\nTEXT_NODE will keep the original indentation and whitespace.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "DOM nodes."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "flankingWhitespace",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~flankingWhitespace",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Flanking the whitespaces.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "whitespaces."
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "flattenNodes",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~flattenNodes",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Flattens the tree structure of nodes.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node[]"
      ],
      "spread": false,
      "description": "Nodes."
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "getContent",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~getContent",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Get a child contents text.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Text."
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "prepareText",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~prepareText",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Prepare the text for parse the jsdom.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Prepared text."
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "isFlankedByWhitespace",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~isFlankedByWhitespace",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Check a flanked by whitespace.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "side",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Flanked if \"true\"."
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "process",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~process",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": null,
    "description": "Convert the Node to Markdown text.",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      },
      {
        "nullable": null,
        "types": [
          "Converter[]"
        ],
        "spread": false,
        "optional": false,
        "name": "converters",
        "description": "Converters."
      },
      {
        "nullable": null,
        "types": [
          "Modes"
        ],
        "spread": false,
        "optional": false,
        "name": "modes",
        "description": "Modes."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "Convert",
    "memberof": "src/lib/converter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/converter.js~Convert",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/converter.js",
    "importStyle": "Convert",
    "description": "Convert the WordPress's post to Markdown.\nDesign and implementation was in reference to the npm to-markdown.",
    "see": [
      "https://github.com/domchristie/to-markdown"
    ],
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "WordPress's post text."
      },
      {
        "nullable": null,
        "types": [
          "Modes"
        ],
        "spread": false,
        "optional": false,
        "name": "modes",
        "description": "Modes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Markdown text."
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/lib/gfm.js",
    "content": "import Util from './util.js'\n\n/**\n * Convert the DOM node to cell text of the table.\n *\n * @param {Node} node DOM node.\n * @param {String} content Content text.\n *\n * @return {String} Cell text.\n */\nfunction Cell (node, content) {\n  let index = 0\n  if (node.parentNode && node.parentNode.childNodes) {\n    index = Util.arrayIndexOf(node.parentNode.childNodes, node)\n  }\n\n  const prefix = (index === 0 ? '| ' : ' ')\n  return prefix + content + ' |'\n}\n\n/**\n * RegExp for the higlighting.\n * @type {RegExp}\n */\nconst HighlightRegEx = /highlight highlight-(\\S+)/\n\n/**\n * Convert the HTML DOM Node to GFM (GitHub Flavored Markdown) text.\n * @type {Array.<MdConverter>}\n * @see https://github.com/domchristie/to-markdown/blob/master/lib/gfm-converters.js\n */\nconst GfmConverters = [\n  // Line break\n  {\n    filter: 'br',\n    replacement: () => {\n      return '\\n'\n    }\n  },\n  // Delete\n  {\n    filter: ['del', 's', 'strike'],\n    replacement: (node, content) => {\n      return '~~' + content + '~~'\n    }\n  },\n  // Checkbox\n  {\n    filter: (node) => {\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI'\n    },\n    replacement: (node) => {\n      return (node.checked ? '[x]' : '[ ]') + ' '\n    }\n  },\n  // Table cell\n  {\n    filter: [ 'th', 'td' ],\n    replacement: (node, content) => {\n      return Cell(node, content)\n    }\n  },\n  // Table row\n  {\n    filter: 'tr',\n    replacement: (node, content) => {\n      let   borderCells = ''\n      const alignMap    = { left: ':--', right: '--:', center: ':-:' }\n\n      if (node.parentNode.nodeName === 'THEAD') {\n        for (let i = 0, max = node.childNodes.length; i < max; ++i) {\n          const elm    = node.childNodes[i]\n          const align  = (elm.attributes ? elm.attributes.align : null)\n          const border = (align ? alignMap[ align.value ] : '---')\n\n          if (elm._replacement) {\n            borderCells += Cell(elm, border)\n          }\n        }\n      }\n\n      return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n    }\n  },\n  // Table\n  {\n    filter: 'table',\n    replacement: (node, content) => {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  },\n  // Table parts\n  {\n    filter: [ 'thead', 'tbody', 'tfoot' ],\n    replacement: (node, content) => {\n      return content\n    }\n  },\n  // Fenced code blocks\n  {\n    filter: (node) => {\n      return node.nodeName === 'PRE' &&\n             node.firstChild &&\n             node.firstChild.nodeName === 'CODE'\n    },\n    replacement: (node) => {\n      return '\\n\\n```\\n' + node.firstChild.textContent + '\\n```\\n\\n'\n    }\n  },\n  // Syntax-highlighted code blocks\n  {\n    filter: (node) => {\n      return node.nodeName === 'PRE' &&\n             node.parentNode.nodeName === 'DIV' &&\n             HighlightRegEx.test(node.parentNode.className)\n    },\n    replacement: (node) => {\n      const language = node.parentNode.className.match(HighlightRegEx)[ 1 ]\n      return '\\n\\n```' + language + '\\n' + node.textContent + '\\n```\\n\\n'\n    }\n  },\n  // Div\n  {\n    filter: (node) => {\n      return node.nodeName === 'DIV' &&\n             HighlightRegEx.test(node.className)\n    },\n    replacement: (node, content) => {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n]\n\nexport default GfmConverters\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/gfm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "Cell",
    "memberof": "src/lib/gfm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/gfm.js~Cell",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/gfm.js",
    "importStyle": null,
    "description": "Convert the DOM node to cell text of the table.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Content text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Cell text."
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "HighlightRegEx",
    "memberof": "src/lib/gfm.js",
    "static": true,
    "longname": "src/lib/gfm.js~HighlightRegEx",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/gfm.js",
    "importStyle": null,
    "description": "RegExp for the higlighting.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "GfmConverters",
    "memberof": "src/lib/gfm.js",
    "static": true,
    "longname": "src/lib/gfm.js~GfmConverters",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/gfm.js",
    "importStyle": "GfmConverters",
    "description": "Convert the HTML DOM Node to GFM (GitHub Flavored Markdown) text.",
    "see": [
      "https://github.com/domchristie/to-markdown/blob/master/lib/gfm-converters.js"
    ],
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array.<MdConverter>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/lib/image-link-replacer.js",
    "content": "import Fs from 'fs'\nimport Path from 'path'\nimport NodeUtil from 'util'\nimport Request from 'request'\nimport Util from './util.js'\n\nconst RequestGet = NodeUtil.promisify(Request)\n\n/**\n * Regular expression.of an image link.\n *\n * @type {RegExp}\n */\nconst REGEX_IMAGE_LINK = /(\\[!\\[[^\\]]*\\]\\((.*?)\\s*(\"(?:.*[^\"])\")?\\s*\\)\\]\\((.*?)\\s*(\"(?:.*[^\"])\")?\\s*\\))|!\\[[^\\]]*\\]\\((.*?)\\s*(\"(?:.*[^\"])\")?\\s*\\)/g\n\n/**\n * Regular expression.of an image URL.\n *\n * @type {RegExp}\n */\nconst REGEX_IMAGE_URL = /(http)?s?:?(\\/\\/[^\"']*?\\.(?:png|jpg|jpeg|gif|png|svg))/\n\n/**\n * Recursively enumurate a file paths from directory.\n *\n * @param {String} dir Path of root directory.\n *\n * @return {String[]} File paths.\n */\nconst enumFiles = (dir) => {\n  let results = []\n  const items = Fs.readdirSync(dir)\n\n  items.forEach((item) => {\n    const path = Path.join(dir, item)\n    const stat = Fs.statSync(path)\n\n    if (stat.isDirectory()) {\n      results = results.concat(enumFiles(path))\n    } else {\n      results.push(path)\n    }\n  })\n\n  return results\n}\n\n/**\n * Download an images.\n *\n * @param {Object} images Image URL/Name.\n * @param {String} dir Save directory.\n * @param {Logger} logger Logger.\n *\n * @return {Promise} Asynchronous task.\n */\nconst downloadImages = async (images, dir, logger) => {\n  const results = []\n  for (let image of images) {\n    logger.log(`Download: \"${image.url}\" => \"${image.fileName}\"`)\n\n    try {\n      const { error, response, body } = await RequestGet({ method: 'GET', url: image.url, encoding: null })\n      if (error) {\n        throw error\n      } else if (response && response.statusCode !== 200) {\n        throw new Error(`ERROR: status code ${response.statusCode}`)\n      }\n\n      Fs.writeFileSync(Path.join(dir, image.fileName), body, 'binary')\n      results.push(image)\n    } catch (err) {\n      logger.error(err)\n    }\n  }\n\n  return results\n}\n\n/**\n * Get image link and URL list from Markdown.\n *\n * @param {String} markdown Markdown text.\n * @param {String} basename Name on which to base the saved image file name.\n *\n * @return {Object} Link and image (URL/Saved file name) list.\n */\nconst parseImageLink = (markdown, basename) => {\n  if (!(markdown)) {\n    return { links: [], images: [] }\n  }\n\n  const urls = []\n  const links = markdown.match(REGEX_IMAGE_LINK)\n  if (!(links && 0 < links.length)) {\n    return { links: [], images: [] }\n  }\n\n  links.forEach((link) => {\n    link.replace(REGEX_IMAGE_URL, (url) => {\n      urls.push(url)\n    })\n  })\n\n  return {\n    links,\n    images: urls\n      .filter((url, i, arr) => arr.indexOf(url) === i)\n      .map((url, i) => {\n        return {\n          url,\n          fileName: `${basename}-${i + 1}${Path.extname(url)}`\n        }\n      })\n  }\n}\n\n/**\n * Replace a link syntaxes.\n *\n * @param {String[]} links Link syntaxes in markdown.\n * @param {Object[]} images Image URL/Name.\n *\n * @return {Object[]} Replaced link syntaxes.\n */\nconst replaceLinks = (links, images) => {\n  const results = []\n  for (let link of links) {\n    let newLink = link\n    for (let image of images) {\n      const regexp = new RegExp(Util.escapeRegExp(image.url), 'g')\n      newLink = newLink.replace(regexp, image.fileName)\n    }\n\n    if (newLink !== link) {\n      // Make it a replacement candidate for markdown if it is replaced\n      results.push({ link, newLink })\n    }\n  }\n\n  return results\n}\n\n/**\n * Download the linked image from Markdown and rewrite the link.\n *\n * @param {String} markdown Markdown text.\n * @param {String} dir Directory where Markdown was output.\n * @param {String} basename Name to be the base of the image file to be saved.\n * @param {Logger} logger Logger.\n *\n * @return {Promise} Asynchronous task.\n */\nconst ImageLinkReplacer = async (markdown, dir, basename, logger) => {\n  try {\n    let data = parseImageLink(markdown, basename)\n    if (data.images.length === 0) {\n      return markdown\n    }\n\n    const succeededImages = await downloadImages(data.images, dir, logger)\n    const targets = replaceLinks(data.links, succeededImages)\n\n    for (let target of targets) {\n      markdown = markdown.replace(target.link, target.newLink)\n    }\n  } catch (err) {\n    logger.error(err)\n  }\n\n  return markdown\n}\n\nexport default ImageLinkReplacer\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/image-link-replacer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "RequestGet",
    "memberof": "src/lib/image-link-replacer.js",
    "static": true,
    "longname": "src/lib/image-link-replacer.js~RequestGet",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "REGEX_IMAGE_LINK",
    "memberof": "src/lib/image-link-replacer.js",
    "static": true,
    "longname": "src/lib/image-link-replacer.js~REGEX_IMAGE_LINK",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Regular expression.of an image link.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "REGEX_IMAGE_URL",
    "memberof": "src/lib/image-link-replacer.js",
    "static": true,
    "longname": "src/lib/image-link-replacer.js~REGEX_IMAGE_URL",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Regular expression.of an image URL.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "enumFiles",
    "memberof": "src/lib/image-link-replacer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/image-link-replacer.js~enumFiles",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Recursively enumurate a file paths from directory.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "Path of root directory."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "File paths."
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "downloadImages",
    "memberof": "src/lib/image-link-replacer.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/image-link-replacer.js~downloadImages",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Download an images.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "Image URL/Name."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "Save directory."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "Logger."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Asynchronous task."
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "parseImageLink",
    "memberof": "src/lib/image-link-replacer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/image-link-replacer.js~parseImageLink",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Get image link and URL list from Markdown.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": "Markdown text."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "basename",
        "description": "Name on which to base the saved image file name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Link and image (URL/Saved file name) list."
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "replaceLinks",
    "memberof": "src/lib/image-link-replacer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/image-link-replacer.js~replaceLinks",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": null,
    "description": "Replace a link syntaxes.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "links",
        "description": "Link syntaxes in markdown."
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "Image URL/Name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "Replaced link syntaxes."
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "ImageLinkReplacer",
    "memberof": "src/lib/image-link-replacer.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/image-link-replacer.js~ImageLinkReplacer",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/image-link-replacer.js",
    "importStyle": "ImageLinkReplacer",
    "description": "Download the linked image from Markdown and rewrite the link.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": "Markdown text."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "Directory where Markdown was output."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "basename",
        "description": "Name to be the base of the image file to be saved."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "Logger."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Asynchronous task."
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/lib/index.js",
    "content": "import WordPressXmlToMarkdown from './wpxml2md.js'\n\n/**\n * Conver WordPress XML to Markdown.\n *\n * @param {String} src Path of the WordPress XML file.\n * @param {String} dest Path of Markdown files output directory.\n * @param {CLIOptions} options Options.\n *\n * @return {Promise} Asynchronous task.\n */\nmodule.exports = WordPressXmlToMarkdown\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/lib/logger.js",
    "content": "/**\n * Display the log message for the stdout.\n */\nexport default class Logger {\n  /**\n   * Initialize instance.\n   *\n   * @param {Boolean} available \"true\" to display the report, default is \"true\".\n   */\n  constructor (available = true) {\n    if (available === null || available === undefined) {\n      available = true\n    }\n\n    this._available = available\n  }\n\n  /**\n   * Display a log message for the stdout.\n   *\n   * @param {Object[]} args Message arguments.\n   */\n  log (...args) {\n    if (this._available) {\n      console.log(...args)\n    }\n  }\n\n  /**\n   * Display an error message for the stdout.\n   *\n   * @param {Object[]} args Message arguments.\n   */\n  error (...args) {\n    if (this._available) {\n      console.error(...args)\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/lib/logger.js",
    "static": true,
    "longname": "src/lib/logger.js~Logger",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/logger.js",
    "importStyle": "Logger",
    "description": "Display the log message for the stdout.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/lib/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/logger.js~Logger#constructor",
    "access": "public",
    "description": "Initialize instance.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "available",
        "description": "\"true\" to display the report, default is \"true\"."
      }
    ]
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "_available",
    "memberof": "src/lib/logger.js~Logger",
    "static": false,
    "longname": "src/lib/logger.js~Logger#_available",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "log",
    "memberof": "src/lib/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/logger.js~Logger#log",
    "access": "public",
    "description": "Display a log message for the stdout.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Message arguments."
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "error",
    "memberof": "src/lib/logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/lib/logger.js~Logger#error",
    "access": "public",
    "description": "Display an error message for the stdout.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Message arguments."
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/lib/markdown.js",
    "content": "import Util from './util.js'\n\n/**\n * Convert the HTML DOM Node to Markdown text.\n * @type {MdConverter[]}\n * @see https://github.com/domchristie/to-markdown/blob/master/lib/md-converters.js\n */\nconst MarkdownConverters = [\n  // Paragraph\n  {\n    filter: 'p',\n    replacement: (node, content) => {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  },\n  // Line break\n  {\n    filter: 'br',\n    replacement: () => {\n      return '  \\n'\n    }\n  },\n  // Header\n  {\n    filter: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],\n    replacement: (node, content, modes) => {\n      const level  = node.nodeName.charAt(1)\n      let   prefix = ''\n      for (let i = 0; i < level; ++i) {\n        prefix += '#'\n      }\n\n      // Inter link (Markdown Extra)\n      if (node.id && !(modes.noMELink)) {\n        return '\\n\\n' + prefix + ' ' + content + ' {#' + node.id + '}\\n\\n'\n      }\n\n      return '\\n\\n' + prefix + ' ' + content + '\\n\\n'\n    }\n  },\n  // Line\n  {\n    filter: 'hr',\n    replacement: () => {\n      return '\\n\\n* * *\\n\\n'\n    }\n  },\n  // Italic\n  {\n    filter: ['em', 'i'],\n    replacement: (node, content) => {\n      return '_' + content + '_'\n    }\n  },\n  // Strong\n  {\n    filter: [ 'strong', 'b' ],\n    replacement: (node, content) => {\n      return '**' + content + '**'\n    }\n  },\n  // Inline code\n  {\n    filter: (node) => {\n      const hasSiblings = node.previousSibling || node.nextSibling\n      const isCodeBlock = (node.parentNode.nodeName === 'PRE' && !(hasSiblings))\n\n      return (node.nodeName === 'CODE' && !(isCodeBlock))\n    },\n    replacement: (node, content) => {\n      return '`' + content + '`'\n    }\n  },\n  // Link\n  {\n    filter: (node) => {\n      return (node.nodeName === 'A' && node.getAttribute('href'))\n    },\n    replacement: (node, content) => {\n      const titlePart = node.title ? ' \"' + node.title + '\"' : ''\n      return '[' + content + '](' + node.getAttribute('href') + titlePart + ')'\n    }\n  },\n  // Image\n  {\n    filter: 'img',\n    replacement: (node) => {\n      const alt       = node.alt || ''\n      const src       = node.getAttribute('src') || ''\n      const title     = node.title || ''\n      const titlePart = title ? ' \"' + title + '\"' : ''\n\n      return src ? '![' + alt + '](' + src + titlePart + ')' : ''\n    }\n  },\n  // Code blocks\n  {\n    filter: (node) => {\n      return node.nodeName === 'PRE' && node.firstChild.nodeName === 'CODE'\n    },\n    replacement: (node) => {\n      return '\\n\\n    ' + node.firstChild.textContent.replace(/\\n/g, '\\n    ') + '\\n\\n'\n    }\n  },\n  // Block quote\n  {\n    filter: 'blockquote',\n    replacement: (node, content) => {\n      let result = Util.trim(content)\n      result = result.replace(/\\n{3,}/g, '\\n\\n')\n      result = result.replace(/^/gm, '> ')\n      return '\\n\\n' + result + '\\n\\n'\n    }\n  },\n  // List item\n  {\n    filter: 'li',\n    replacement: (node, content) => {\n      const text   = content.replace(/^\\s+/, '').replace(/\\n/gm, '\\n    ')\n      const parent = node.parentNode\n      const index  = Util.arrayIndexOf(parent.children, node) + 1\n      const ol     = /ol/i\n      const prefix = ol.test(parent.nodeName) ? index + '. ' : '* '\n      return prefix + text\n    }\n  },\n  // List\n  {\n    filter: [ 'ul', 'ol' ],\n    replacement: (node) => {\n      const strings = []\n      for (let i = 0, max = node.childNodes.length; i < max; ++i) {\n        if (node.childNodes[i]._replacement) {\n          strings.push(node.childNodes[i]._replacement)\n        }\n      }\n\n      const li = /li/i\n      if (li.test(node.parentNode.nodeName)) {\n        return '\\n' + strings.join('\\n')\n      }\n\n      return '\\n\\n' + strings.join('\\n') + '\\n\\n'\n    }\n  },\n  // Block element\n  {\n    filter: (node) => {\n      return Util.isBlockElement(node)\n    },\n    replacement: (node, content) => {\n      return '\\n\\n' + Util.outerHTML(node, content) + '\\n\\n'\n    }\n  },\n  // Anything else!\n  {\n    filter: () => {\n      return true\n    },\n    replacement: (node, content) => {\n      return Util.outerHTML(node, content)\n    }\n  }\n]\n\nexport default MarkdownConverters\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/markdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "MarkdownConverters",
    "memberof": "src/lib/markdown.js",
    "static": true,
    "longname": "src/lib/markdown.js~MarkdownConverters",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/markdown.js",
    "importStyle": "MarkdownConverters",
    "description": "Convert the HTML DOM Node to Markdown text.",
    "see": [
      "https://github.com/domchristie/to-markdown/blob/master/lib/md-converters.js"
    ],
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "MdConverter[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/lib/shortcode.js",
    "content": "/**\n * Constatns for the Converter class.\n * @type {Object}\n */\nconst SHCodes = [\n  // ``` + lang parameter\n  'code',\n\n  // ```\n  'plain',\n  'text',\n\n  // ```lang\n  'as3',\n  'actionscript3',\n  'bash',\n  'shell',\n  'cf',\n  'coldfusion',\n  'c-sharp',\n  'csharp',\n  'cpp',\n  'c',\n  'css',\n  'delphi',\n  'pas',\n  'pascal',\n  'diff',\n  'patch',\n  'erl',\n  'erlang',\n  'groovy',\n  'js',\n  'jscript',\n  'javascript',\n  'java',\n  'jfx',\n  'javafx',\n  'perl',\n  'pl',\n  'php',\n  'ps',\n  'powershell',\n  'py',\n  'python',\n  'rails',\n  'ror',\n  'ruby',\n  'scala',\n  'sql',\n  'vb',\n  'vbnet',\n  'xml',\n  'xhtml',\n  'xslt',\n  'html'\n]\n\n/**\n * String of the Code block.\n * @type {Object}\n */\nconst Block = {\n  BeginPlain: '\\n\\n```\\n',\n  Begin: '\\n\\n```',\n  End: '\\n```\\n\\n'\n}\n\n/**\n * Remove the new line beginning and end of the code block.\n *\n * @param {String} text Code block text.\n *\n * @return {Text} New text.\n */\nconst trimLineBreak = (text) => {\n  return text.replace(/^[\\n]|[\\n]$/g, '')\n}\n\n/**\n * Convert a SyntaxHighlighter shortcode to Markdown.\n *\n * @param {String} src Original text.\n * @param {String} code Shortcode name.\n * @param {Object} params Shortcode parameters.\n * @param {String} body Shortcode body.\n *\n * @return {String} Converted text.\n */\nconst convertSH = (src, code, params, body) => {\n  const value = trimLineBreak(body)\n  if (code === SHCodes[ 0 ]) {\n    if (params.lang) {\n      return Block.Begin + params.lang + '\\n' + value + Block.End\n    }\n\n    return Block.BeginPlain + value + Block.End\n  } else if (code === SHCodes[1] || code === SHCodes[2]) {\n    return Block.BeginPlain + value + Block.End\n  }\n\n  for (let i = 3, max = SHCodes.length; i < max; ++i) {\n    if (code === SHCodes[i]) {\n      return Block.Begin + code + `\\n` + value + Block.End\n    }\n  }\n\n  return src\n}\n\n/**\n * Parse a WordPress shortcode (\"code param1=\"value1\" param2=\"value2\").\n *\n * @param {String} text shortcode text.\n *\n * @return {Object} Parsed result.\n */\nconst parse = (text) => {\n  const codes = text.split(' ')\n  const obj   = { code: codes[0], params: {} }\n\n  for (let i = 1, max = codes.length; i < max; ++i) {\n    const params = codes[i].split('=')\n    if (params.length === 1) {\n      obj.params[params[0]] = ' '\n    } else {\n      obj.params[params[0]] = params[1].replace(/^\"(.+(?=\"$))\"$/, '$1')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Convert the WordPress's shotcode to Markdown.\n *\n * @return {String} Converted string.\n */\nconst ConvertShortCode = (text) => {\n  return text.replace(/\\[([^\\]]+)]([^[]+)\\[\\/([^\\]]+)]/igm, (src, $1, $2) => {\n    const shortcode = parse($1)\n    if (shortcode.code === 'caption') {\n      return $2\n    }\n\n    return convertSH(src, shortcode.code, shortcode.params, $2)\n  })\n}\n\nexport default ConvertShortCode\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/shortcode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "SHCodes",
    "memberof": "src/lib/shortcode.js",
    "static": true,
    "longname": "src/lib/shortcode.js~SHCodes",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": null,
    "description": "Constatns for the Converter class.",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "Block",
    "memberof": "src/lib/shortcode.js",
    "static": true,
    "longname": "src/lib/shortcode.js~Block",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": null,
    "description": "String of the Code block.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "trimLineBreak",
    "memberof": "src/lib/shortcode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/shortcode.js~trimLineBreak",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "convertSH",
    "memberof": "src/lib/shortcode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/shortcode.js~convertSH",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": null,
    "description": "Convert a SyntaxHighlighter shortcode to Markdown.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Original text."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Shortcode name."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Shortcode parameters."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "Shortcode body."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Converted text."
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "parse",
    "memberof": "src/lib/shortcode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/shortcode.js~parse",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": null,
    "description": "Parse a WordPress shortcode (\"code param1=\"value1\" param2=\"value2\").",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "shortcode text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Parsed result."
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "ConvertShortCode",
    "memberof": "src/lib/shortcode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/shortcode.js~ConvertShortCode",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/shortcode.js",
    "importStyle": "ConvertShortCode",
    "description": "Convert the WordPress's shotcode to Markdown.",
    "lineNumber": 139,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Converted string."
    },
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/lib/util.js",
    "content": "import Fs from 'fs'\nimport Path from 'path'\n\n/**\n * Elements of block.\n * @type {Array}\n */\nconst BlockElements = [\n  'address', 'article', 'aside', 'audio', 'blockquote', 'body', 'canvas',\n  'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',\n  'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n  'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',\n  'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',\n  'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\n]\n\n/**\n * Elements of void.\n * @type {Array.<String>}\n */\nconst VoidElements = [\n  'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\n  'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'\n]\n\n/**\n * Provides utility function.\n */\nexport default class Util {\n  /**\n   * This method returns the first index at which a given element can be found in the array\n   *\n   * @param {Array} arr Array.\n   * @param {Object} obj Element to locate in the array.\n   *\n   * @return {Number} If the success index, otherwise -1.\n   */\n  static arrayIndexOf (arr, obj) {\n    return Array.prototype.indexOf.call(arr, obj)\n  }\n\n  /**\n   * Escape a regexp syntaxes.\n   *\n   * @param {String} str Original string.\n   *\n   * @return {String} Escaped string.\n   *\n   * @see https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string-in-javascript\n   */\n  static escapeRegExp (str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n  }\n\n  /**\n   * Check the existence of a file or folder.\n   *\n   * @param {String} path Path of the file or folder.\n   *\n   * @return {Boolean} True if exists. Otherwise false.\n   */\n  static existsSync (path) {\n    try {\n      Fs.accessSync(Path.resolve(path), Fs.F_OK)\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  /**\n   * Converts the value of the Date object to its equivalent string representation using the specified format.\n   *\n   * @param {Date}   date   Date and time. Default is current date and time.\n   * @param {String} format Date and time format string. Default is \"YYYY-MM-DD hh:mm:ss.SSS\".\n   *\n   * @return {String} Formatted string.\n   *\n   * @see http://qiita.com/osakanafish/items/c64fe8a34e7221e811d0\n   */\n  static formatDate (date, format) {\n    if (!(date)) {\n      date = new Date()\n    }\n\n    if (typeof format !== 'string') {\n      format = 'YYYY-MM-DD hh:mm:ss.SSS'\n    }\n\n    const Y = date.getFullYear()\n    const M = date.getMonth()\n    const D = date.getDate()\n    const h = date.getHours()\n    const m = date.getMinutes()\n    const s = date.getSeconds()\n\n    if (Number.isNaN(Y) || Number.isNaN(M) || Number.isNaN(D) || Number.isNaN(h) || Number.isNaN(m) || Number.isNaN(s)) {\n      return null\n    }\n\n    // Zero padding\n    let f = format\n    f = f.replace(/YYYY/g, Y)\n    f = f.replace(/MM/g,   ('0' + (M + 1)).slice(-2))\n    f = f.replace(/DD/g,   ('0' +         D).slice(-2))\n    f = f.replace(/hh/g,   ('0' +         h).slice(-2))\n    f = f.replace(/mm/g,   ('0' +         m).slice(-2))\n    f = f.replace(/ss/g,   ('0' +         s).slice(-2))\n\n    // Single digit\n    f = f.replace(/M/g, M + 1)\n    f = f.replace(/D/g, D)\n    f = f.replace(/h/g, h)\n    f = f.replace(/m/g, m)\n    f = f.replace(/s/g, s)\n\n    if (f.match(/S/g)) {\n      let ms = date.getMilliseconds()\n      if (!(Number.isNaN(ms))) {\n        ms = ('00' + ms).slice(-3)\n        for (let i = 0, max = f.match(/S/g).length; i < max; ++i) {\n          f = f.replace(/S/, ms.substring(i, i + 1))\n        }\n      }\n    }\n\n    return f\n  }\n\n  /**\n   * Check the node of a block element.\n   *\n   * @param {Node} node Node.\n   *\n   * @return {Boolean} Block element if \"true\".\n   */\n  static isBlockElement (node) {\n    return BlockElements.indexOf(node.nodeName.toLowerCase()) !== -1\n  }\n\n  /**\n   * Check the node of a void element.\n   *\n   * @param {Node} node Node.\n   *\n   * @return {Boolean} Void element if \"true\".\n   */\n  static isVoidElement (node) {\n    return VoidElements.indexOf(node.nodeName.toLowerCase()) !== -1\n  }\n\n  /**\n   * Asynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback.\n   * mode defaults to 0o777.\n   *\n   * @param {String} path Directory path.\n   *\n   * @return {Boolean} Success if \"true\".\n   */\n  static mkdirSync (path) {\n    const dir = Path.resolve(path)\n    if (Util.existsSync(dir)) {\n      return true\n    }\n\n    Fs.mkdirSync(dir)\n    return Util.existsSync(dir)\n  }\n\n  /**\n   * Get the HTML string of an element with its contents converted.\n   *\n   * @param  {Node}   node    DOM node.\n   * @param  {String} content Text.\n   *\n   * @return {String} HTML text.\n   */\n  static outerHTML (node, content) {\n    const clone = node.cloneNode(false)\n    if (clone.outerHTML) {\n      return clone.outerHTML.replace('><', '>' + content + '<')\n    }\n\n    return content\n  }\n\n  /**\n   * Get a datetime from WordPress XML GMT\n   *\n   * @param {String} gmt String of GMT.\n   *\n   * @return {Object} Datetime.\n   */\n  static datetimeFromWpGMT (gmt) {\n    const datetime = gmt.split(' ')\n    const date     = datetime[0].split('-')\n\n    return {\n      year: date[0],\n      month: date[1],\n      day: date[2],\n      time: datetime[1]\n    }\n  }\n\n  /**\n   * Remove whitespace from both sides of a string.\n   *\n   * @param {String} str String.\n   *\n   * @return {String} New string.1\n   */\n  static trim (str) {\n    return str.replace(/^[ \\r\\n\\t]+|[ \\r\\n\\t]+$/g, '')\n  }\n\n  /**\n   * If the file or folder to the same path on exists, generates a unique path that does not duplicate.\n   * e.g. \"./test\" to \"test-1\", \"./test.md\" to \"./test-1.md\"\n   *\n   * @param  {String} path Original path.\n   * @param  {Number} min  The minimum value of the sequential number. Defailt is 1.\n   * @param  {Number} max  The maximum value of the sequential number. Defailt is 256.\n   *\n   * @return {String} Success is the unique path (full path), failure is null. If not duplicate returns the original path.\n   */\n  static uniquePathWithSequentialNumber (path, min = 1, max = 256) {\n    const originalPath = Path.resolve(path)\n    if (!(Util.existsSync(originalPath) && typeof min === 'number' && typeof max === 'number' && 0 <= min && min < max)) {\n      return originalPath\n    }\n\n    const ext    = Path.extname(originalPath)\n    const base   = Path.basename(originalPath, ext)\n    const parent = Path.dirname(originalPath)\n\n    for (let i = min; i <= max; ++i) {\n      const name       = base + '-' + i + ext\n      const uniquePath = Path.join(parent, name)\n      if (!(Util.existsSync(uniquePath))) {\n        return uniquePath\n      }\n    }\n\n    return null\n  }\n}\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "BlockElements",
    "memberof": "src/lib/util.js",
    "static": true,
    "longname": "src/lib/util.js~BlockElements",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/util.js",
    "importStyle": null,
    "description": "Elements of block.",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "VoidElements",
    "memberof": "src/lib/util.js",
    "static": true,
    "longname": "src/lib/util.js~VoidElements",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/util.js",
    "importStyle": null,
    "description": "Elements of void.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array.<String>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "class",
    "name": "Util",
    "memberof": "src/lib/util.js",
    "static": true,
    "longname": "src/lib/util.js~Util",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/util.js",
    "importStyle": "Util",
    "description": "Provides utility function.",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "arrayIndexOf",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.arrayIndexOf",
    "access": "public",
    "description": "This method returns the first index at which a given element can be found in the array",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "Array."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Element to locate in the array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "If the success index, otherwise -1."
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "escapeRegExp",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.escapeRegExp",
    "access": "public",
    "description": "Escape a regexp syntaxes.",
    "see": [
      "https://stackoverflow.com/questions/1144783/how-to-replace-all-occurrences-of-a-string-in-javascript"
    ],
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "Original string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Escaped string."
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "existsSync",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.existsSync",
    "access": "public",
    "description": "Check the existence of a file or folder.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path of the file or folder."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if exists. Otherwise false."
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "formatDate",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.formatDate",
    "access": "public",
    "description": "Converts the value of the Date object to its equivalent string representation using the specified format.",
    "see": [
      "http://qiita.com/osakanafish/items/c64fe8a34e7221e811d0"
    ],
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "Date and time. Default is current date and time."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "Date and time format string. Default is \"YYYY-MM-DD hh:mm:ss.SSS\"."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Formatted string."
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "isBlockElement",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.isBlockElement",
    "access": "public",
    "description": "Check the node of a block element.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Block element if \"true\"."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "isVoidElement",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.isVoidElement",
    "access": "public",
    "description": "Check the node of a void element.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Void element if \"true\"."
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "mkdirSync",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.mkdirSync",
    "access": "public",
    "description": "Asynchronous mkdir(2). No arguments other than a possible exception are given to the completion callback.\nmode defaults to 0o777.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Directory path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Success if \"true\"."
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "outerHTML",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.outerHTML",
    "access": "public",
    "description": "Get the HTML string of an element with its contents converted.",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "DOM node."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "Text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "HTML text."
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "datetimeFromWpGMT",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.datetimeFromWpGMT",
    "access": "public",
    "description": "Get a datetime from WordPress XML GMT",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "gmt",
        "description": "String of GMT."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Datetime."
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "trim",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.trim",
    "access": "public",
    "description": "Remove whitespace from both sides of a string.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "String."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "New string.1"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "uniquePathWithSequentialNumber",
    "memberof": "src/lib/util.js~Util",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/util.js~Util.uniquePathWithSequentialNumber",
    "access": "public",
    "description": "If the file or folder to the same path on exists, generates a unique path that does not duplicate.\ne.g. \"./test\" to \"test-1\", \"./test.md\" to \"./test-1.md\"",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Original path."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum value of the sequential number. Defailt is 1."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum value of the sequential number. Defailt is 256."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Success is the unique path (full path), failure is null. If not duplicate returns the original path."
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/lib/wpxml2md.js",
    "content": "import Fs from 'fs'\nimport Path  from 'path'\nimport NodeUtil from 'util'\nimport XmlParser  from 'xml2js'\nimport Util from './util.js'\nimport Logger from './logger.js'\nimport Convert from './converter.js'\nimport ImageLinkReplace from './image-link-replacer.js'\nimport Comment from './comment.js'\n\nconst ParseXML = NodeUtil.promisify(XmlParser.parseString)\n\n/**\n * Create a directory to save the markdown file.\n * @param {String} root Path of the roo directory.\n * @param {String} year Year.\n * @param {String} month Month\n * @return {String} If successful it is the path of the created directory.\n */\nconst createSaveDir = (root, year, month) => {\n  // root/year\n  let dir  = Path.join(root, year)\n  if (!(Util.mkdirSync(dir))) {\n    return null\n  }\n\n  // root/year/month\n  dir = Path.join(dir, month)\n  if (!(Util.mkdirSync(dir))) {\n    return null\n  }\n\n  return dir\n}\n\n/**\n * Array to string for metadata.\n * @param {Array} arr Array.\n * @return {String} String.\n */\nconst arrayToString = (arr) => {\n  if (!(arr && arr.length)) {\n    return '[]'\n  }\n\n  let str = `[\"${arr[0]}\"`\n  for (let i = 1, max = arr.length; i < max; ++i) {\n    str += `, \"${arr[i]}\"`\n  }\n\n  str += ']'\n  return str\n}\n\n/**\n * Create a excerpt string from Markdown text.\n * The specification of the excerpt statement is below.\n * - No line break\n * - No header, list (ul/ol), table, blockquote\n * - No Markdown decoration\n * - Markdown links and images extracted only text\n * - Add \"...\" to the end if it exceeds 100 characters\n * - Escape a double quote for YAML\n * @param {String} markdown Markdown text of content body.\n * @return {String} Excerpted string.\n */\nconst createExcerpt = (markdown) => {\n  if (!markdown) {\n    return ''\n  }\n\n  let str = markdown\n    .replace(/\\n\\n/mg, '\\n')\n    .replace(/^(#|\\*|\\d{1,5}\\. |\\||> ).*?\\n/mg, '')\n    .replace(/\\n/mg, '')\n    .replace(/\\*\\*(.*?)\\*\\*/g, (m, $1) => $1)\n    .replace(/__(.*?)__/g, (m, $1) => $1)\n    .replace(/!\\[(.*?)\\]\\(.*?\\)/g, (m, $1) => $1)\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, (m, $1) => $1)\n    .replace(/\"/g, '\\\\\"')\n\n  str = 100 <= str.length ? str.substring(0, 99) + '...' : str\n  return str\n}\n\n/**\n * Create a header of article metadata.\n * @param {Object} metadata Metadata of article.\n * @param {String} markdown Markdown text of content body.\n * @return {String} Header text.\n */\nconst createMetadataHeader = (metadata, markdown) => {\n  const last = metadata.type === 'page' ? 'single: true\\n---\\n\\n' : '---\\n\\n'\n  return `---\npath: \"/${metadata.type}s/${metadata.year}/${metadata.month}/${metadata.permanentName}/\"\ndate: \"${metadata.year}-${metadata.month}-${metadata.day}T${metadata.time}Z\"\ntitle: \"${metadata.title}\"\ncategories: ${arrayToString(metadata.categories)}\ntags: ${arrayToString(metadata.tags)}\nexcerpt: \"${createExcerpt(markdown)}\"\n${last}`\n}\n\n/**\n * Read an article metadata from xml object.\n * @param {Object} post XML object.\n * @return {Object} Metadata.\n */\nconst readMetadata = (post) => {\n  const categories = []\n  const tags       = []\n  if (post.category) {\n    post.category.forEach((value) => {\n      switch (value.$.domain) {\n        case 'category':\n          categories.push(value._)\n          break\n\n        case 'post_tag':\n          tags.push(value._)\n          break\n\n        default:\n          break\n      }\n    })\n  }\n\n  const datetime = Util.datetimeFromWpGMT(post['wp:post_date_gmt'][0])\n  return {\n    year: datetime.year,\n    month: datetime.month,\n    day: datetime.day,\n    time: datetime.time,\n    permanentName: post['wp:post_name'][0],\n    title: post['title'][0],\n    categories,\n    tags,\n    type: post['wp:post_type'][0]\n  }\n}\n\n/**\n * Replace the link URL included in Markdown.\n * @param {String} markdown Markdown text.\n * @param {String} oldPrefix Target.\n * @param {String} newPrefix String to replace.\n * @return {String} Replaced string.\n */\nconst replaceLinkURL = (markdown, oldPrefix, newPrefix) => {\n  if (!(markdown && (oldPrefix && typeof oldPrefix === 'string') && (newPrefix && typeof newPrefix === 'string'))) {\n    return markdown\n  }\n\n  return markdown.replace(/\\[(.*?)\\]\\((.*?)\\)/g, (match, $1, $2) => {\n    const regexp = new RegExp(Util.escapeRegExp(oldPrefix), 'g')\n    const url = $2.replace(regexp, newPrefix)\n    return `[${$1}](${url})`\n  })\n}\n\n/**\n * Convert the post data to markdown file.\n * @param {Object} post Post data.\n * @param {Object} metadata Metadata.\n * @param {String} rootDir Path of Markdown file output directory.\n * @param {Logger} logger Logger.\n * @param {CLIOptions} options Options.\n * @return {Promise} Promise task.\n */\nconst convertPost = async (post, metadata, rootDir, logger, options) => {\n  logger.log(`${metadata.year}/${metadata.month}/${metadata.day} ['${metadata.type}']: ${metadata.title}`)\n\n  const dir = createSaveDir(rootDir, metadata.year, metadata.month)\n  if (!(dir)) {\n    throw new Error('Failed to create a save directory.')\n  }\n\n  // If there are multiple articles on the same day, their names will be duplicated and made unique.\n  const filePath = Util.uniquePathWithSequentialNumber(Path.join(dir, `${metadata.day}.md`))\n  const stream = Fs.createWriteStream(filePath)\n  if (!(stream)) {\n    throw new Error('Failed to create the stream.')\n  }\n\n  let markdown = Convert(post['content:encoded'][0], options)\n  if (options.withMetadata) {\n    stream.write(createMetadataHeader(metadata, markdown), 'utf8')\n  } else {\n    stream.write(`# ${metadata.title}\\n\\n`, 'utf8')\n  }\n\n  if (options.withImageDownload) {\n    const basename = Path.basename(filePath, '.md')\n    markdown = await ImageLinkReplace(markdown, dir, basename, logger)\n  }\n\n  if (options.replaceLinkPrefix) {\n    markdown = replaceLinkURL(markdown, options.replaceLinkPrefix.old, options.replaceLinkPrefix.new)\n  }\n\n  if (options.withComment) {\n    markdown += Comment(post['wp:comment'])\n  }\n\n  stream.write(markdown, 'utf8')\n}\n\n/**\n * Create a directory with a unique name.\n * @param {String} dir Base directory path.\n * @return {String} The path of the created directory. Failure is null.\n */\nconst createUniqueDestDir = (dir) => {\n  const base = Path.resolve(dir)\n  const name = Util.formatDate(new Date(), 'YYYYMMDD-hhmmss')\n\n  let path = Path.resolve(base, name)\n  if (!(Util.existsSync(path))) {\n    if (Util.mkdirSync(path)) {\n      return path\n    }\n  }\n\n  // Add sequential number\n  for (let i = 1; i <= 256; ++i) {\n    path = Path.resolve(base, name + '-' + i)\n    if (!(Util.existsSync(path))) {\n      if (Util.mkdirSync(path)) {\n        return path\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Gets the posts data from XML.\n * @param {String} src Path of XML file..\n * @return {Promise} Promise task.\n */\nconst postsFromXML = async (src) => {\n  const data = Fs.readFileSync(Path.resolve(src))\n  if (!(data)) {\n    throw new Error(`\"${src}\" is not found.`)\n  }\n  const xml   = await ParseXML(data.toString())\n  return xml.rss.channel[0].item\n}\n\n/**\n * Conver WordPress XML file to Markdown files.\n * @param {String} src Path of the WordPress XML file.\n * @param {String} dest Path of Markdown files output directory.\n * @param {CLIOptions} options Options.\n * @return {Promise} Promise object.\n */\nconst WordPressXmlToMarkdown = async (src, dest, options = { report: false }) => {\n  const logger = new Logger(options.report)\n  logger.log(`Input:  ${src}`)\n  logger.log(`Output: ${dest}`)\n\n  const dir = createUniqueDestDir(dest)\n  if (!(dir)) {\n    throw new Error('Failed to create the root directory.')\n  }\n\n  const postsDir = Path.join(dir, 'posts')\n  if (!(Util.mkdirSync(postsDir))) {\n    throw new Error('Failed to create the posts directory.')\n  }\n\n  const pagesDir = Path.join(dir, 'pages')\n  if (!(Util.mkdirSync(pagesDir))) {\n    throw new Error('Failed to create the pages directory.')\n  }\n\n  const posts = await postsFromXML(src)\n  for (let post of posts) {\n    const m = readMetadata(post)\n    await convertPost(post, m, m.type === 'post' ? postsDir : pagesDir, logger, options)\n  }\n}\n\nexport default WordPressXmlToMarkdown\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/wpxml2md.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "ParseXML",
    "memberof": "src/lib/wpxml2md.js",
    "static": true,
    "longname": "src/lib/wpxml2md.js~ParseXML",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "createSaveDir",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~createSaveDir",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Create a directory to save the markdown file.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "Path of the roo directory."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "year",
        "description": "Year."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "month",
        "description": "Month"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "If successful it is the path of the created directory."
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "arrayToString",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~arrayToString",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Array to string for metadata.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "Array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "String."
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "createExcerpt",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~createExcerpt",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Create a excerpt string from Markdown text.\nThe specification of the excerpt statement is below.\n- No line break\n- No header, list (ul/ol), table, blockquote\n- No Markdown decoration\n- Markdown links and images extracted only text\n- Add \"...\" to the end if it exceeds 100 characters\n- Escape a double quote for YAML",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": "Markdown text of content body."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Excerpted string."
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "createMetadataHeader",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~createMetadataHeader",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Create a header of article metadata.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": "Metadata of article."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": "Markdown text of content body."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Header text."
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "readMetadata",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~readMetadata",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Read an article metadata from xml object.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "XML object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Metadata."
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "replaceLinkURL",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~replaceLinkURL",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Replace the link URL included in Markdown.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "markdown",
        "description": "Markdown text."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "oldPrefix",
        "description": "Target."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "newPrefix",
        "description": "String to replace."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Replaced string."
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "convertPost",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/wpxml2md.js~convertPost",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Convert the post data to markdown file.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "post",
        "description": "Post data."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": "Metadata."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rootDir",
        "description": "Path of Markdown file output directory."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "Logger."
      },
      {
        "nullable": null,
        "types": [
          "CLIOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise task."
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "createUniqueDestDir",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/lib/wpxml2md.js~createUniqueDestDir",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Create a directory with a unique name.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "Base directory path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The path of the created directory. Failure is null."
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "postsFromXML",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/wpxml2md.js~postsFromXML",
    "access": "public",
    "export": false,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": null,
    "description": "Gets the posts data from XML.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Path of XML file.."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise task."
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "WordPressXmlToMarkdown",
    "memberof": "src/lib/wpxml2md.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/lib/wpxml2md.js~WordPressXmlToMarkdown",
    "access": "public",
    "export": true,
    "importPath": "wpxml2md/src/lib/wpxml2md.js",
    "importStyle": "WordPressXmlToMarkdown",
    "description": "Conver WordPress XML file to Markdown files.",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": "Path of the WordPress XML file."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dest",
        "description": "Path of Markdown files output directory."
      },
      {
        "nullable": null,
        "types": [
          "CLIOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise object."
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * @external {WritableStream} https://nodejs.org/api/stream.html\n */\n\n/**\n * convert the HTML element to Markdown.\n *\n * @typedef {Object} MdConverter\n * @property {String|Array|Function} filter Filter to check the HTML tags.\n * @property {Function} replacement Function to replace the DOM Node.\n */\n\n/**\n * Modes of markdown parse and output.\n *\n * @typedef {Object} Modes\n * @property {Boolean} noGFM Disable a GitHub Flavored Markdown. Default is enable.\n * @property {Boolean} noMELink Disable a GitHub Extra link on header. Default is enable.\n * @property {Boolean} withMetadata Output article metadata in YAML format at the top of Markdown.\n * @property {Boolean} withImageLinkReplace Download the linked images from articles. The file name is the same as markdown. Multiple images become serial numbers.\n */\n\n/**\n * Value of replace link prefix.\n *\n * @typedef {Object} ReplaceLinkPrefix\n * @property {String} old Target string.\n * @property {String} new Placeholder string.\n */\n\n/**\n * Commad line options.\n *\n * @typedef {Object} CLIOptions\n * @property {Boolean} help Mode to display the help text.\n * @property {Boolean} version Mode to display the version number.\n * @property {String} input Path of the SVG file or PNG file directory.\n * @property {String} output Path of the output directory.\n * @property {Boolean} report Display the process reports. Default is disable.\n * @property {Boolean} noGFM Disable the GitHub Flavored Markdown.\n * @property {Boolean} noMELink Disable the Markdown Extra link on header.\n * @property {Boolean} withMetadata Enable output article metadata.\n * @property {Boolean} withImageLinkReplace Enable download and replace link syntaxes a linked images from article.\n * @property {ReplaceLinkPrefix} replaceLinkPrefix Replace the link URL prefix with the specified word.\n */\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "WritableStream",
    "externalLink": "https://nodejs.org/api/stream.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~WritableStream",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 139,
    "kind": "typedef",
    "name": "MdConverter",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~MdConverter",
    "access": "public",
    "description": "convert the HTML element to Markdown.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String",
          "Array",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "Filter to check the HTML tags."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": "Function to replace the DOM Node."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MdConverter"
    }
  },
  {
    "__docId__": 140,
    "kind": "typedef",
    "name": "Modes",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Modes",
    "access": "public",
    "description": "Modes of markdown parse and output.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noGFM",
        "description": "Disable a GitHub Flavored Markdown. Default is enable."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noMELink",
        "description": "Disable a GitHub Extra link on header. Default is enable."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withMetadata",
        "description": "Output article metadata in YAML format at the top of Markdown."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withImageLinkReplace",
        "description": "Download the linked images from articles. The file name is the same as markdown. Multiple images become serial numbers."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Modes"
    }
  },
  {
    "__docId__": 141,
    "kind": "typedef",
    "name": "ReplaceLinkPrefix",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ReplaceLinkPrefix",
    "access": "public",
    "description": "Value of replace link prefix.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "old",
        "description": "Target string."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "new",
        "description": "Placeholder string."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ReplaceLinkPrefix"
    }
  },
  {
    "__docId__": 142,
    "kind": "typedef",
    "name": "CLIOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~CLIOptions",
    "access": "public",
    "description": "Commad line options.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "help",
        "description": "Mode to display the help text."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "Mode to display the version number."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "Path of the SVG file or PNG file directory."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "Path of the output directory."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "report",
        "description": "Display the process reports. Default is disable."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noGFM",
        "description": "Disable the GitHub Flavored Markdown."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noMELink",
        "description": "Disable the Markdown Extra link on header."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withMetadata",
        "description": "Enable output article metadata."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "withImageLinkReplace",
        "description": "Enable download and replace link syntaxes a linked images from article."
      },
      {
        "nullable": null,
        "types": [
          "ReplaceLinkPrefix"
        ],
        "spread": false,
        "optional": false,
        "name": "replaceLinkPrefix",
        "description": "Replace the link URL prefix with the specified word."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CLIOptions"
    }
  },
  {
    "kind": "index",
    "content": "# npm-wpxml2md\n\n[![Support Node of LTS](https://img.shields.io/badge/node-LTS-brightgreen.svg)](https://nodejs.org/)\n[![npm version](https://badge.fury.io/js/wpxml2md.svg)](https://badge.fury.io/js/wpxml2md)\n[![Build Status](https://travis-ci.org/akabekobeko/npm-wpxml2md.svg?branch=master)](https://travis-ci.org/akabekobeko/npm-wpxml2md)\n[![Document](https://img.shields.io/badge/document-ESDoc-brightgreen.svg)](https://akabekobeko.github.io/npm-wpxml2md/)\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](http://standardjs.com/)\n\nConvert the WordPress XML file to Markdown files.\n\n## Installation\n\n```\n$ npm install wpxml2md\n```\n\n## WordPress XML\n\nCan export the **WordPress XML** in the following way.\n\n1. Displays the management screen of WordPress\n2. Select the `Tools` - `Export` from the menu\n3. Select `All content` in `Choose what to export`\n4. Click to `Download Export File`\n\n## Usage\n\n### Node API\n\n`wpxml2md` is promisify function.\n\n```js\nconst wpxml2md = require('wpxml2md');\n\nconst options = {\n  report: true,\n  noGFM: false,\n  noMELink: true,\n  withMetadata: true,\n  withImageDownload: true,\n  withComment: true,\n  replaceLinkPrefix: {\n    old: 'http://akabeko.me/blog/',\n    new: '/'\n  }\n}\n\nwpxml2md('wordpress.xml', 'dest', options)\n.then(() => {\n  console.log('Completed!!');\n} )\n.catch((err) => {\n  console.error(err);\n});\n```\n\n#### wpxml2md\n\n`wpxml2md(src, dest, options)`\n\n|Name|Type|Description|\n|---|---|---|\n|src|String|Path of the XML file exported from WordPress.|\n|dest|String|Destination directory path.|\n|options|Object|Options.|\n\nOptions:\n\n|Name|Type|Description|\n|---|---|---|\n|report|Boolean|Default is `false`. Display the process reports.|\n|noGFM|Boolean|Default is `false`. Disable the Convert the GitHub Flavored Markdown.|\n|noMELink|Boolean|Default is `false`. Disable the Convert the GitHub Extra link on header.|\n|withMetadata|Boolean|Default is `false`. Output article metadata in YAML format at the top of Markdown.|\n|withImageDownload|Boolean|Default is `false`. Download the linked images from articles. The file name is the same as markdown. Multiple images become serial numbers, `DD` is an article posted day (yyyymm\"dd\"). `DD-1.png`, `DD-2.png`, ...etc.|\n|replaceLinkPrefix|Object|Default is `undefined`. Replace the link URL prefix with the specified word.|\n|_replaceLinkPrefix_.old|String|Target.|\n|_replaceLinkPrefix_.new|String|Replacement.|\n\n### CLI\n\n```\nUsage: wpxml2md [OPTIONS]\n\n  Convert the WordPress XML file to Markdown files.\n\n  Options:\n    -h, --help            Display this text.\n    -v, --version         Display the version number.\n    -i, --input           Path of the XML file exported from WordPress.\n    -o, --output          Path of the output directory.\n    -r, --report          Output process reports.\n    --no-gfm              Disable the GitHub Flavored Markdown.\n    --no-melink           Disable the Markdown Extra link on header.\n    --with-metadata       Enable output article metadata.\n    --with-image-download Enable download and replace link syntaxes a linked images from article.\n    --with-comment        Enable comment output from article.\n    --replace-link-prefix Replace the link URL prefix with the specified word, format is \"target=placeholder\".\n                          If \"--replace-link http://example.com/=/\" then \"http://example.com/\" will be replaced with \"/\".\n\n  Examples:\n    $ wpxml2md -i wordpress.xml -o ./dist -r\n    $ wpxml2md -i wordpress.xml -o ./dist -r --with-metadata --with-image-download --with-comment --replace-link-prefix http://akabeko.me/=/\n\n  See also:\n    https://github.com/akabekobeko/npm-wpxml2md\n```\n\n## Conversion\n\nThis section describes the conversion by this tool. Markdown conversion engine was in reference to the design and implementation of the [domchristie/to-markdown](https://github.com/domchristie/to-markdown), rewrite an ES2015 and more.\n\n### Output directories\n\nConverted Markdown files are output in the following directory.\n\n```\nYYYYMMDD-hhmmss/\n├── pages\n│   └── YYYY\n│       └── MM\n│           └── DD.md\n└── posts\n    └── YYYY\n        └── MM\n            └── DD.md\n```\n\n* The name of the root directory is the date time that the execution of the processing\n* The result of converting the **Pages** will be output to the `pages` directory\n* The result of converting the **Posts** will be output to the `posts` directory\n* Markdown's file name is posted date time.\n* If the file or directory name is a duplicate will be added to the **sequential number** at the end.\n\n### HTML TAG\n\nDefault markdown.\n\n|TAG|Markdown|\n|---|---|\n|`Plain Text`|Plain text will keep the line breaks and blank lines. It is a specification to enable the WordPress of paragraph function.|\n|`<p>`|`\\n\\nTEXT\\n\\n`|\n|`<br>`|`\\n`|\n|`<h1>` |`\\n\\n# TEXT\\n\\n`, support from `h1` to `h6`.|\n|`<h1 id=\"id\">`|`\\n\\n# TEXT {#id}\\n\\n`, for Markdown Extra.|\n|`<hr>`|`\\n\\n* * *\\n\\n`|\n|`<em>`, `<i>`|`_TEXT_`|\n|`<strong>`, `<b>`|`**TEXT**`|\n|`<code>`|`` `TEXT` ``|\n|`<a>`|`[TEXT](URL \"ALT\")`|\n|`<img>`|`![TITLE](URL)`|\n|`<pre><code>`|`\\n\\n    TEXT\\n\\n`|\n|`<blockquote>`| `\\n\\n> TEXT\\n\\n`|\n|`<ul><li>`|`\\n\\n* TEXT\\n\\n`|\n|`<ol><li>`|`\\n\\n1. TEXT\\n\\n`|\n\nGitHub Flavored Markdown.\n\n|TAG|Markdown|\n|---|---|\n|`<br>`|`\\n`|\n|`<del>`, `<s>`, `<strike>`|`~~TEXT~~`|\n|`<ul><li><input type=\"checkbox\">` |`* [ ] Text`, **checked** is true if `[x]`.|\n|`<table>` |see: [Organizing information with tables - User Documentation](https://help.github.com/articles/organizing-information-with-tables/)|\n|`<pre><code>` |````\\n\\n```\\nCODE\\n```\\n\\n````|\n|`<div class=\"highlight highlight-lang\"><pre>`|````\\n\\n```lang\\nCODE\\n```\\n\\n````|\n\n### Shortcode\n\n#### caption\n\n```\n[caption]\n<a href=\"example.png\" title=\"Title\">\n  <img src=\"example.png\" alt=\"Title\"></a>\n</a>\n[/caption]\n```\n\nRemove the short code dregs. Contents will Markdown conversion as HTML.\n\n```\n[![Title](example.png)](example.png \"Title\")\n```\n#### code\n\n```\n[code lang=\"js\"]\nconst test = 'test';\nconsole.log(test);\n[/code]\n```\n\n`code` is converted to a code block.\n\n\n    ```js\n    const test = 'test';\n    console.log(test);\n    ```\n\n\nShort code of programming languages and converts it to a code block.\n\n```\n[js]\nconst test = 'test';\nif (test) {\n  console.log(test);\n}\n[/js]\n```\n\nFor example, the above will be converted to the following.\n\n    ```js\n    const test = 'test';\n    if (test) {\n      console.log(test);\n    }\n    ```\n\nLanguage to be converted is the following. The language names are based on the [SyntaxHighlighter - Bundled Brushes](http://alexgorbatchev.com/SyntaxHighlighter/manual/brushes/).\n\n|Language|Shortcode|\n|:--|:--|\n|Plain Text|plain, text|\n|ActionScript3|as3, actionscript3|\n|Bash/shell|bash, shell|\n|ColdFusion|cf, coldfusion|\n|C#|c-sharp, csharp|\n|C++|cpp, c|\n|CSS|css|\n|Delphi|delphi, pas, pascal|\n|Diff|diff, patch|\n|Erlang|erl, erlang|\n|Groovy|groovy|\n|JavaScript|js, jscript, javascript|\n|Java|java|\n|JavaFX|jfx, javafx|\n|Perl|perl, pl|\n|PHP|php|\n|PowerShell|ps, powershell|\n|Python|py, python|\n|Ruby|rails, ror, ruby|\n|Scala|scala|\n|SQL|sql|\n|Visual Basic|vb, vbnet|\n|XML|xml, xhtml, xslt, html, xhtml|\n\n## ChangeLog\n\n* [CHANGELOG](CHANGELOG.md)\n\n## License\n\n* [MIT](LICENSE.txt)\n",
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"wpxml2md\",\n  \"description\": \"Convert the WordPress XML file to Markdown files.\",\n  \"version\": \"2.0.0\",\n  \"author\": \"akabeko (http://akabeko.me/)\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/akabekobeko/npm-wpxml2md#readme\",\n  \"engines\": {\n    \"node\": \">= 8\"\n  },\n  \"main\": \"dist/lib/index.js\",\n  \"bin\": \"dist/bin/index.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"Convert\",\n    \"WordPress\",\n    \"XML\",\n    \"Markdown\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/akabekobeko/npm-wpxml2md.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/akabekobeko/npm-wpxml2md/issues\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --timeout 50000 --require @babel/register src/**/*.test.js\",\n    \"start\": \"npm run watch\",\n    \"esdoc\": \"esdoc\",\n    \"eslint\": \"eslint ./src\",\n    \"build\": \"babel src --out-dir dist --ignore *.test.js,typedef.js\",\n    \"watch\": \"babel src --out-dir dist --ignore *.test.js,typedef.js --watch\",\n    \"prepare\": \"npm run build\"\n  },\n  \"dependencies\": {\n    \"collapse-whitespace\": \"^1.1.6\",\n    \"jsdom\": \"^12.1.0\",\n    \"md5\": \"^2.2.1\",\n    \"request\": \"^2.88.0\",\n    \"xml2js\": \"^0.4.19\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.1.2\",\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"@babel/register\": \"^7.0.0\",\n    \"babel-preset-power-assert\": \"^3.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.6.1\",\n    \"eslint-config-standard\": \"^12.0.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-node\": \"^7.0.1\",\n    \"eslint-plugin-promise\": \"^4.0.1\",\n    \"eslint-plugin-standard\": \"^4.0.0\",\n    \"mocha\": \"^5.2.0\",\n    \"power-assert\": \"^1.6.1\",\n    \"rewire\": \"^4.0.1\"\n  }\n}\n",
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 143,
    "kind": "testFile",
    "name": "src/bin/cli.test.js",
    "content": "import assert from 'assert'\nimport Path from 'path'\nimport Rewire from 'rewire'\n\n/** @test {CLI} */\ndescribe('CLI', () => {\n  const Module = Rewire('./cli.js')\n\n  /** @test {CLI#parseArgv} */\n  describe('parseArgv', () => {\n    const parseArgv = Module.__get__('parseArgv')\n    const Options = Module.__get__('Options')\n\n    it('input', () => {\n      const input    = './examples/wp.xml'\n      const expected = Path.resolve(input)\n      let options = parseArgv([Options.input.name, input])\n      assert(options.input === expected)\n\n      options = parseArgv([Options.input.shortName, input])\n      assert(options.input === expected)\n\n      options = parseArgv([Options.input.name])\n      assert(options.input !== expected)\n\n      options = parseArgv([Options.input.shortName, Options.help.name])\n      assert(options.input !== expected)\n    })\n\n    it('output', () => {\n      const output = './examples'\n      const expected = Path.resolve(output)\n      let options = parseArgv([Options.output.name, output])\n      assert(options.output === expected)\n\n      options = parseArgv([Options.output.shortName, output])\n      assert(options.output === expected)\n\n      options = parseArgv([Options.output.name])\n      assert(options.output !== expected)\n\n      options = parseArgv([Options.output.shortName, Options.help.name])\n      assert(options.output !== expected)\n    })\n\n    it('report', () => {\n      let options = parseArgv([Options.report.name])\n      assert(options.report === true)\n\n      options = parseArgv([Options.report.shortName])\n      assert(options.report === true)\n    })\n\n    it('noGFM', () => {\n      const options = parseArgv([Options.noGFM.name])\n      assert(options.noGFM === true)\n    })\n\n    it('noMELink', () => {\n      const options = parseArgv([Options.noMELink.name])\n      assert(options.noMELink === true)\n    })\n\n    it('withMetadata', () => {\n      const options = parseArgv([Options.withMetadata.name])\n      assert(options.withMetadata === true)\n    })\n\n    it('withImageDownload', () => {\n      const options = parseArgv([Options.withImageDownload.name])\n      assert(options.withImageDownload === true)\n    })\n\n    it('withComment', () => {\n      const options = parseArgv([Options.withComment.name])\n      assert(options.withComment === true)\n    })\n\n    it('replaceLinkPrefix', () => {\n      const options = parseArgv([Options.replaceLinkPrefix.name, 'http://example.com/=/'])\n      assert(options.replaceLinkPrefix.old === 'http://example.com/')\n      assert(options.replaceLinkPrefix.new === '/')\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/bin/cli.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "src/bin/cli.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0",
    "access": null,
    "description": "CLI",
    "lineNumber": 6,
    "testTargets": [
      "CLI"
    ]
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "src/bin/cli.test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1",
    "access": null,
    "description": "parseArgv",
    "lineNumber": 10,
    "testTargets": [
      "CLI#parseArgv"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it2",
    "access": null,
    "description": "input",
    "lineNumber": 14
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it3",
    "access": null,
    "description": "output",
    "lineNumber": 30
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it4",
    "access": null,
    "description": "report",
    "lineNumber": 46
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it5",
    "access": null,
    "description": "noGFM",
    "lineNumber": 54
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it6",
    "access": null,
    "description": "noMELink",
    "lineNumber": 59
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it7",
    "access": null,
    "description": "withMetadata",
    "lineNumber": 64
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it8",
    "access": null,
    "description": "withImageDownload",
    "lineNumber": 69
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it9",
    "access": null,
    "description": "withComment",
    "lineNumber": 74
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "src/bin/cli.test.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "src/bin/cli.test.js~describe0.describe1.it10",
    "access": null,
    "description": "replaceLinkPrefix",
    "lineNumber": 79
  },
  {
    "__docId__": 155,
    "kind": "testFile",
    "name": "src/lib/comment.test.js",
    "content": "import assert from 'assert'\nimport Rewire from 'rewire'\n\ndescribe('Comment', () => {\n  const Module = Rewire('./comment.js')\n  describe('convertBody', () => {\n    const convertBody = Module.__get__('convertBody')\n\n    it('Normal', () => {\n      const actual = convertBody(`aaa\\nbbb`)\n      const expected = '  > aaa\\n  > bbb'\n      assert(actual === expected)\n    })\n  })\n\n  describe('convertMarkdown', () => {\n    const convertMarkdown = Module.__get__('convertMarkdown')\n\n    it('Tree', () => {\n      const comments = [\n        {\n          author: 'akabeko',\n          date: { year: '2017', month: '12', day: '28', time: '09:42:28' },\n          url: 'http://akabeko.me/',\n          mail: `sample@example.com`,\n          content: 'aaaaa\\naaaaa',\n          children: [\n            {\n              author: 'anonymous',\n              date: { year: '2017', month: '12', day: '28', time: '09:45:12' },\n              mail: `sample2@example.com`,\n              content: 'bbbbb',\n              children: [\n                {\n                  author: 'anonymous',\n                  date: { year: '2017', month: '12', day: '29', time: '17:01:47' },\n                  content: 'ccccc\\nccccc'\n                }\n              ]\n            }\n          ]\n        },\n        {\n          author: 'anonymous',\n          date: { year: '2017', month: '12', day: '29', time: '18:17:33' },\n          content: 'zzzzzz'\n        }\n      ]\n\n      const actual = convertMarkdown(comments)\n      const expected =\n`* ![akabeko](https://www.gravatar.com/avatar/45e67126a4c44c6ae030279e21437c79?d=identicon) **[akabeko](http://akabeko.me/)** 2017-12-28T09:42:28Z\n  > aaaaa\n  > aaaaa\n* ![anonymous](https://www.gravatar.com/avatar/cc7cd2a9c587aafc83517c97ab675864?d=identicon) **anonymous** 2017-12-28T09:45:12Z\n  > bbbbb\n* **anonymous** 2017-12-29T17:01:47Z\n  > ccccc\n  > ccccc\n* **anonymous** 2017-12-29T18:17:33Z\n  > zzzzzz\n`\n\n      assert(actual === expected)\n    })\n\n    it('Empty', () => {\n      const actual = convertMarkdown()\n      const expected = ''\n      assert(actual === expected)\n    })\n  })\n\n  describe('createCommentTree', () => {\n    const createCommentTree = Module.__get__('createCommentTree')\n\n    it('Create tree', () => {\n      const comments = [\n        { id: '1' },\n        { id: '2', parent: '1' },\n        { id: '3' },\n        { id: '4', parent: '2' }\n      ]\n      const actual = createCommentTree(comments)\n      const expected = [\n        {\n          id: '1',\n          children: [\n            {\n              id: '2',\n              parent: '1',\n              children: [\n                {\n                  id: '4',\n                  parent: '2'\n                }\n              ]\n            }\n          ]\n        },\n        { id: '3' }\n      ]\n\n      assert.deepStrictEqual(actual, expected)\n    })\n\n    it('Empty', () => {\n      const actual = createCommentTree()\n      const expected = []\n      assert.deepStrictEqual(actual, expected)\n    })\n  })\n\n  describe('parse', () => {\n    const parse = Module.__get__('parse')\n\n    it('Single comment', () => {\n      const comments = [{\n        'wp:comment_id': ['66571'],\n        'wp:comment_author': ['anonymous'],\n        'wp:comment_author_email': ['anonymous@example.com'],\n        'wp:comment_author_url': ['http://example.com/'],\n        'wp:comment_author_IP': ['192.168.0.0'],\n        'wp:comment_date': ['2017-12-28 13:59:53'],\n        'wp:comment_date_gmt': ['2017-12-28 04:59:53'],\n        'wp:comment_content': ['Message\\nMessage\\n\\nMessage'],\n        'wp:comment_approved': ['1'],\n        'wp:comment_type': [],\n        'wp:comment_parent': ['0'],\n        'wp:comment_user_id': ['0']\n      }]\n\n      const actual = parse(comments)\n      const expected = [\n        {\n          id: '66571',\n          author: 'anonymous',\n          mail: 'anonymous@example.com',\n          url: 'http://example.com/',\n          date: { year: '2017', month: '12', day: '28', time: '04:59:53' },\n          content: 'Message\\nMessage\\n\\nMessage',\n          parent: '0'\n        }\n      ]\n\n      assert.deepStrictEqual(actual, expected)\n    })\n\n    it('Empty', () => {\n      const actual = parse()\n      const expected = []\n      assert.deepStrictEqual(actual, expected)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/comment.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "src/lib/comment.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11",
    "access": null,
    "description": "Comment",
    "lineNumber": 4
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "src/lib/comment.test.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe12",
    "access": null,
    "description": "convertBody",
    "lineNumber": 6
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "src/lib/comment.test.js~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe12.it13",
    "access": null,
    "description": "Normal",
    "lineNumber": 9
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "src/lib/comment.test.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe14",
    "access": null,
    "description": "convertMarkdown",
    "lineNumber": 16
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "src/lib/comment.test.js~describe11.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe14.it15",
    "access": null,
    "description": "Tree",
    "lineNumber": 19
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "src/lib/comment.test.js~describe11.describe14",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe14.it16",
    "access": null,
    "description": "Empty",
    "lineNumber": 67
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "src/lib/comment.test.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe17",
    "access": null,
    "description": "createCommentTree",
    "lineNumber": 74
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "src/lib/comment.test.js~describe11.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe17.it18",
    "access": null,
    "description": "Create tree",
    "lineNumber": 77
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "src/lib/comment.test.js~describe11.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe17.it19",
    "access": null,
    "description": "Empty",
    "lineNumber": 107
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "src/lib/comment.test.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe20",
    "access": null,
    "description": "parse",
    "lineNumber": 114
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "src/lib/comment.test.js~describe11.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe20.it21",
    "access": null,
    "description": "Single comment",
    "lineNumber": 117
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "src/lib/comment.test.js~describe11.describe20",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/comment.test.js~describe11.describe20.it22",
    "access": null,
    "description": "Empty",
    "lineNumber": 149
  },
  {
    "__docId__": 168,
    "kind": "testFile",
    "name": "src/lib/converter.test.js",
    "content": "import assert from 'assert'\nimport Convert from './converter.js'\n\n/** @test {Converter} */\ndescribe('Converter', () => {\n  /** @test {Convert} */\n  describe('convert: Markdown', () => {\n    it('Plain text (TEXT_NODE), Keep a whitespace and line break', () => {\n      const post     = 'Line 1\\n\\nLine 2  Word\\nLine3'\n      const expected = 'Line 1\\n\\nLine 2  Word\\nLine3'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<p>', () => {\n      const post     = '<p>\\nLine 1\\n\\nLine 2\\n</p>'\n      const expected = 'Line 1 Line 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<br>', () => {\n      const post     = 'Line 1<br>Line 2<br>Line 3'\n      const expected = 'Line 1  \\nLine 2  \\nLine 3'\n      const actual   = Convert(post, { noGFM: true })\n      assert(actual === expected)\n    })\n\n    it('<h1> - <h6>, and Markdown Extra Link', () => {\n      const post =\n`<h1>Title</h1>\n  <h2 id=\"header-2\">Header 2</h2>\n    <h3>Header 3</h3>\n      <h4>Header 4</h4>\n        <h5>Header 5</h5>\n          <h6>Header 6</h6>`\n\n      const expected =\n`# Title\n\n## Header 2 {#header-2}\n\n### Header 3\n\n#### Header 4\n\n##### Header 5\n\n###### Header 6`\n\n      const actual = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<h1> no-melink', () => {\n      const post     = '<h1 id=\"section1\">Header</h1>'\n      const expected = '# Header'\n      const actual   = Convert(post, { noMELink: true })\n      assert(actual === expected)\n    })\n\n    it('<hr>', () => {\n      const post     = '<hr>'\n      const expected = '* * *'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<em>, <i>', () => {\n      const post     = '<em>Word 1</em> <i>Word 2</i>'\n      const expected = '_Word 1_ _Word 2_'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<code>', () => {\n      const post     = 'Text <code>Code</code> Text'\n      const expected = 'Text `Code` Text'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<a>', () => {\n      const post     = 'Text <a href=\"://example.com/\" title=\"title\">Link</a> Text <a href=\"#id\">Inter Link</a>'\n      const expected = 'Text [Link](://example.com/ \"title\") Text [Inter Link](#id)'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<img>', () => {\n      const post     = '<img src=\"example.png\" alt=\"Title\"> <img src=\"example.png\" title=\"Example\">'\n      const expected = '![Title](example.png) ![](example.png \"Example\")'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<pre><code>...</code></pre>', () => {\n      const post =\n`\nText\n\n<pre><code>\nconst test = 'test';\n</code></pre>\n\nText\n`\n\n      const expected = 'Text\\n\\n    const test = \\'test\\';\\n\\nText'\n      const actual   = Convert(post, { noGFM: true })\n      assert(actual === expected)\n    })\n\n    it('<blockquote>', () => {\n      const post = '<blockquote>\\nLine 1\\nLine 2\\n</blockquote>'\n      const expected = '> Line 1 Line 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<ul><li>', () => {\n      const post =\n`<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ul>`\n      const expected = '* Item 1\\n* Item 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<ul><li>, nested', () => {\n      const post =\n`<ul>\n  <li>Item 1\n    <ul>\n      <li>Item 1-1</li>\n      <li>Item 1-2</li>\n    </ul>\n  </li>\n  <li>Item 2</li>\n</ul>`\n      const expected = '* Item 1\\n    * Item 1-1\\n    * Item 1-2\\n* Item 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<ol><li>', () => {\n      const post =\n`<ol>\n  <li>Item 1</li>\n  <li>Item 2</li>\n</ol>`\n      const expected = '1. Item 1\\n2. Item 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<ol><li>, nested', () => {\n      const post =\n`<ol>\n  <li>Item 1\n    <ol>\n      <li>Item 1-1</li>\n      <li>Item 1-2</li>\n    </ol>\n  </li>\n  <li>Item 2</li>\n</ol>`\n      const expected = '1. Item 1\\n    1. Item 1-1\\n    2. Item 1-2\\n2. Item 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('Block Element', () => {\n      const post     = '<address>Copyright 2009 - 2016 akabeko All Rights Reserved</address>'\n      const expected = '<address>Copyright 2009 - 2016 akabeko All Rights Reserved</address>'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('Otherwise', () => {\n      const post     = '<example>Test</example>'\n      const expected = '<example>Test</example>'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n  })\n\n  /** @test {Convert} */\n  describe('convert: GitHub Flavored Markdown', () => {\n    it('<br>', () => {\n      const post     = 'Line 1<br>Line 2<br>Line 3'\n      const expected = 'Line 1\\nLine 2\\nLine 3'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<del>, <s>, <strike>', () => {\n      const post     = '<del>Text 1</del> <s>Text 2</s> <strike>Text 3</strike>'\n      const expected = '~~Text 1~~ ~~Text 2~~ ~~Text 3~~'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<ul><li><input type=\"checkbox\">', () => {\n      const post     = '<ul><li><input type=\"checkbox\">Item 1</li><li><input type=\"checkbox\" checked=\"true\">Item 2</li></ul>'\n      const expected = '* [ ] Item 1\\n* [x] Item 2'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<pre><code>...</code></pre>', () => {\n      const post =\n`\nText\n\n<pre><code>\nconst test = 'test';\n</code></pre>\n\nText\n`\n\n      const expected = 'Text\\n\\n```\\nconst test = \\'test\\';\\n```\\n\\nText'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<div class=\"highlight highlight-lang\"><pre>...</pre></div>', () => {\n      const post =\n`\nText\n\n<div class=\"highlight highlight-js\"><pre>\nconst test = 'test';\n</pre></div>\n\nText\n`\n\n      const expected = 'Text\\n\\n```js\\nconst test = \\'test\\';\\n\\n```\\n\\nText'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<th>', () => {\n      const post     = '<table><th>Header 1</th><th>Header 2</th></table>'\n      const expected = '| Header 1 | Header 2 |'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<td>', () => {\n      const post     = '<table><td>Value 1</td><td>Value 2</td></table>'\n      const expected = '| Value 1 | Value 2 |'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<th>, <td>', () => {\n      const post     = '<table><tr><th>Header 1</th><th>Header 2</th></tr><tr><td>Value 1</td><td>Value 2</td></tr></table>'\n      const expected = '| Header 1 | Header 2 |\\n| Value 1 | Value 2 |'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n\n    it('<thead><th>, <tbody><td>', () => {\n      const post =\n`<table>\n  <thead>\n    <tr><th>Header 1</th><th>Header 2</th></tr>\n</thead>\n  <tbody>\n    <tr><td>Value 1</td><td>Value 2</td></tr>\n  </tbody>\n</table>`\n      const expected = '| Header 1 | Header 2 |\\n| --- | --- |\\n| Value 1 | Value 2 |'\n      const actual   = Convert(post)\n      assert(actual === expected)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/converter.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "src/lib/converter.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23",
    "access": null,
    "description": "Converter",
    "lineNumber": 5,
    "testTargets": [
      "Converter"
    ]
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "src/lib/converter.test.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24",
    "access": null,
    "description": "convert: Markdown",
    "lineNumber": 7,
    "testTargets": [
      "Convert"
    ]
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it25",
    "access": null,
    "description": "Plain text (TEXT_NODE), Keep a whitespace and line break",
    "lineNumber": 8
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it26",
    "access": null,
    "description": "<p>",
    "lineNumber": 15
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it27",
    "access": null,
    "description": "<br>",
    "lineNumber": 22
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it28",
    "access": null,
    "description": "<h1> - <h6>, and Markdown Extra Link",
    "lineNumber": 29
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it29",
    "access": null,
    "description": "<h1> no-melink",
    "lineNumber": 55
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it30",
    "access": null,
    "description": "<hr>",
    "lineNumber": 62
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it31",
    "access": null,
    "description": "<em>, <i>",
    "lineNumber": 69
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it32",
    "access": null,
    "description": "<code>",
    "lineNumber": 76
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it33",
    "access": null,
    "description": "<a>",
    "lineNumber": 83
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it34",
    "access": null,
    "description": "<img>",
    "lineNumber": 90
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it35",
    "access": null,
    "description": "<pre><code>...</code></pre>",
    "lineNumber": 97
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it36",
    "access": null,
    "description": "<blockquote>",
    "lineNumber": 114
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it37",
    "access": null,
    "description": "<ul><li>",
    "lineNumber": 121
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it38",
    "access": null,
    "description": "<ul><li>, nested",
    "lineNumber": 132
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it39",
    "access": null,
    "description": "<ol><li>",
    "lineNumber": 148
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it40",
    "access": null,
    "description": "<ol><li>, nested",
    "lineNumber": 159
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it41",
    "access": null,
    "description": "Block Element",
    "lineNumber": 175
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "src/lib/converter.test.js~describe23.describe24",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe24.it42",
    "access": null,
    "description": "Otherwise",
    "lineNumber": 182
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "src/lib/converter.test.js~describe23",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43",
    "access": null,
    "description": "convert: GitHub Flavored Markdown",
    "lineNumber": 191,
    "testTargets": [
      "Convert"
    ]
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it44",
    "access": null,
    "description": "<br>",
    "lineNumber": 192
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it45",
    "access": null,
    "description": "<del>, <s>, <strike>",
    "lineNumber": 199
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it46",
    "access": null,
    "description": "<ul><li><input type=\"checkbox\">",
    "lineNumber": 206
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it47",
    "access": null,
    "description": "<pre><code>...</code></pre>",
    "lineNumber": 213
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it48",
    "access": null,
    "description": "<div class=\"highlight highlight-lang\"><pre>...</pre></div>",
    "lineNumber": 230
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it49",
    "access": null,
    "description": "<th>",
    "lineNumber": 247
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it50",
    "access": null,
    "description": "<td>",
    "lineNumber": 254
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it51",
    "access": null,
    "description": "<th>, <td>",
    "lineNumber": 261
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "src/lib/converter.test.js~describe23.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/converter.test.js~describe23.describe43.it52",
    "access": null,
    "description": "<thead><th>, <tbody><td>",
    "lineNumber": 268
  },
  {
    "__docId__": 199,
    "kind": "testFile",
    "name": "src/lib/image-link-replacer.test.js",
    "content": "import assert from 'assert'\nimport Rewire from 'rewire'\n\n/** @test {ImageLinkReplacer} */\ndescribe('ImageLinkReplacer', () => {\n  const Module = Rewire('./image-link-replacer.js')\n\n  /** @test {parseImageLink} */\n  describe('parseImageLink', () => {\n    const parseImageLink = Module.__get__('parseImageLink')\n\n    it('Parse', () => {\n      const md =\n`![title](http://example.com/sample.png)\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\n[title](http://example.com/dummy/)\n\n[![title](http://example.com/thumbnail.jpg)](http://example.com/sample.png \"title\")\n`\n      const actual = parseImageLink(md, 'base')\n      const expected = {\n        links: [\n          '![title](http://example.com/sample.png)',\n          '[![title](http://example.com/thumbnail.jpg)](http://example.com/sample.png \"title\")'\n        ],\n        images: [\n          { url: 'http://example.com/sample.png', fileName: 'base-1.png' },\n          { url: 'http://example.com/thumbnail.jpg', fileName: 'base-2.jpg' }\n        ]\n      }\n\n      assert.deepStrictEqual(actual, expected)\n    })\n  })\n\n  /** @test {replaceLinks} */\n  describe('replaceLinks', () => {\n    const replaceLinks = Module.__get__('replaceLinks')\n\n    it('Replace links', () => {\n      const links = [\n        '![title](http://example.com/sample.png)',\n        '[title](http://example.com/dummy.gif)',\n        '[![title](http://example.com/sample.png)](http://example.com/sample.png \"title\")',\n        '[![title](http://example.com/thumbnail.jpg)](http://example.com/sample.png \"title\")'\n      ]\n\n      const images = [\n        { url: 'http://example.com/sample.png', fileName: '1.png' },\n        { url: 'http://example.com/thumbnail.jpg', fileName: '2.jpg' }\n      ]\n\n      const actual = replaceLinks(links, images)\n\n      // Other than `dummy.gif` should be replaced\n      const expected = [\n        { link: links[0], newLink: '![title](1.png)' },\n        { link: links[2], newLink: '[![title](1.png)](1.png \"title\")' },\n        { link: links[3], newLink: '[![title](2.jpg)](1.png \"title\")' }\n      ]\n\n      assert.deepStrictEqual(actual, expected)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/image-link-replacer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "src/lib/image-link-replacer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/image-link-replacer.test.js~describe53",
    "access": null,
    "description": "ImageLinkReplacer",
    "lineNumber": 5,
    "testTargets": [
      "ImageLinkReplacer"
    ]
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "src/lib/image-link-replacer.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/image-link-replacer.test.js~describe53.describe54",
    "access": null,
    "description": "parseImageLink",
    "lineNumber": 9,
    "testTargets": [
      "parseImageLink"
    ]
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "src/lib/image-link-replacer.test.js~describe53.describe54",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/image-link-replacer.test.js~describe53.describe54.it55",
    "access": null,
    "description": "Parse",
    "lineNumber": 12
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "src/lib/image-link-replacer.test.js~describe53",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/image-link-replacer.test.js~describe53.describe56",
    "access": null,
    "description": "replaceLinks",
    "lineNumber": 39,
    "testTargets": [
      "replaceLinks"
    ]
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "src/lib/image-link-replacer.test.js~describe53.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/image-link-replacer.test.js~describe53.describe56.it57",
    "access": null,
    "description": "Replace links",
    "lineNumber": 42
  },
  {
    "__docId__": 205,
    "kind": "testFile",
    "name": "src/lib/shortcode.test.js",
    "content": "import assert from 'assert'\nimport Rewire from 'rewire'\nimport ConvertShortCode from './shortcode.js'\n\n/** @test {ConvertShortCode} */\ndescribe('ConvertShortCode', () => {\n  const Module = Rewire('./shortcode.js')\n\n  /** @test {ConvertShortCode} */\n  describe('ConvertShortCode', () => {\n    it('[code]', () => {\n      const text     = '[code]\\nCode\\n[/code]'\n      const actual   = ConvertShortCode(text)\n      const expected = '\\n\\n```\\nCode\\n```\\n\\n'\n      assert(actual === expected)\n    })\n\n    it('[code lang=\"lang\"]', () => {\n      const text     = '[code lang=\"lang\"]\\nCode\\n[/code]'\n      const actual   = ConvertShortCode(text)\n      const expected = '\\n\\n```lang\\nCode\\n```\\n\\n'\n      assert(actual === expected)\n    })\n\n    it('[lang]', () => {\n      let text = '[plain]\\nCode\\n[/plain]'\n      let actual = ConvertShortCode(text)\n      let expected = '\\n\\n```\\nCode\\n```\\n\\n'\n      assert(actual === expected)\n\n      text = '[text]\\nCode\\n[/text]'\n      actual = ConvertShortCode(text)\n      assert(actual === expected)\n\n      const SHCodes = Module.__get__('SHCodes')\n      for (let i = 3, max = SHCodes.length; i < max; ++i) {\n        const code = SHCodes[ i ]\n        text = '[' + code + ']Code[/' + code + ']'\n        actual   = ConvertShortCode(text)\n        expected = '\\n\\n```' + code + '\\nCode\\n```\\n\\n'\n        assert(actual === expected)\n      }\n    })\n  })\n\n  /** @test {parse} */\n  describe('parse', () => {\n    const parse = Module.__get__('parse')\n\n    it('parse', () => {\n      const text = 'caption id=\"ID\" align=\"alignright\" width=\"300\" caption=\"Caption\"'\n      const actual = parse(text)\n      assert(actual.code           === 'caption')\n      assert(actual.params.id      === 'ID')\n      assert(actual.params.align   === 'alignright')\n      assert(actual.params.width   === '300')\n      assert(actual.params.caption === 'Caption')\n    })\n  })\n\n  /** @test {trimLineBreak} */\n  describe('trimLineBreak', () => {\n    const trimLineBreak = Module.__get__('trimLineBreak')\n\n    it('trimLineBreak', () => {\n      let actual = trimLineBreak('\\nText\\n')\n      assert(actual === 'Text')\n\n      actual = trimLineBreak('\\n\\nText\\n')\n      assert(actual === '\\nText')\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/shortcode.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "src/lib/shortcode.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58",
    "access": null,
    "description": "ConvertShortCode",
    "lineNumber": 6,
    "testTargets": [
      "ConvertShortCode"
    ]
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "src/lib/shortcode.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe59",
    "access": null,
    "description": "ConvertShortCode",
    "lineNumber": 10,
    "testTargets": [
      "ConvertShortCode"
    ]
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "src/lib/shortcode.test.js~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe59.it60",
    "access": null,
    "description": "[code]",
    "lineNumber": 11
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "src/lib/shortcode.test.js~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe59.it61",
    "access": null,
    "description": "[code lang=\"lang\"]",
    "lineNumber": 18
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "src/lib/shortcode.test.js~describe58.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe59.it62",
    "access": null,
    "description": "[lang]",
    "lineNumber": 25
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "src/lib/shortcode.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe63",
    "access": null,
    "description": "parse",
    "lineNumber": 47,
    "testTargets": [
      "parse"
    ]
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "src/lib/shortcode.test.js~describe58.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe63.it64",
    "access": null,
    "description": "parse",
    "lineNumber": 50
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "src/lib/shortcode.test.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe65",
    "access": null,
    "description": "trimLineBreak",
    "lineNumber": 62,
    "testTargets": [
      "trimLineBreak"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "src/lib/shortcode.test.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/shortcode.test.js~describe58.describe65.it66",
    "access": null,
    "description": "trimLineBreak",
    "lineNumber": 65
  },
  {
    "__docId__": 215,
    "kind": "testFile",
    "name": "src/lib/util.test.js",
    "content": "import assert from 'assert'\nimport Path from 'path'\nimport Util from './util.js'\n\n/** @test {Util} */\ndescribe('Util', () => {\n  describe('escapeRegExp', () => {\n    it('Escape', () => {\n      const actual = Util.escapeRegExp('https://example.com/test.jpeg')\n      const expected = 'https://example\\\\.com/test\\\\.jpeg'\n      assert(actual === expected)\n    })\n  })\n\n  /** @test {Util#existsSync} */\n  describe('existsSync', () => {\n    it('Exists', () => {\n      assert(Util.existsSync('./examples'))\n    })\n\n    it('Not exists', () => {\n      assert(!(Util.existsSync('./XXX')))\n    })\n  })\n\n  /** @test {Util#formatDate} */\n  describe('formatDate', () => {\n    it('Default YYYY-MM-DD hh:mm:ss.SSS', () => {\n      const date = new Date(2015, 7, 4, 21, 17, 45, 512)\n      const text = Util.formatDate(date)\n      assert(text === '2015-08-04 21:17:45.512')\n    })\n\n    it('Hyphen YYYY-MM-DD-hh-mm-ss', () => {\n      const date = new Date(2015, 7, 4, 21, 17, 45, 512)\n      const text = Util.formatDate(date, 'YYYY-MM-DD-hh-mm-ss')\n      assert(text === '2015-08-04-21-17-45')\n    })\n\n    it('No zero-padding YYYY/M/D h:m:s', () => {\n      const date = new Date(2015, 7, 4, 21, 17, 45, 512)\n      const text = Util.formatDate(date, 'YYYY/M/D h:m:s')\n      assert(text === '2015/8/4 21:17:45')\n    })\n\n    it('NaN', () => {\n      const date = new Date('Wed, 30 Nov -0001 00:00:00 +0000')\n      const text = Util.formatDate(date, 'YYYY/M/D h:m:s')\n      assert(text === null)\n    })\n  })\n\n  /** @test {Util#uniquePathWithSequentialNumber} */\n  describe('uniquePathWithSequentialNumber', () => {\n    it('Unique path: directory', () => {\n      const actual = Util.uniquePathWithSequentialNumber('./examples')\n      const expect = Path.resolve('./examples-1')\n      assert(actual === expect)\n    })\n\n    it('Unique path: file', () => {\n      const actual = Util.uniquePathWithSequentialNumber('./src/lib/index.js')\n      const expect = Path.resolve('./src/lib/index-1.js')\n      assert(actual === expect)\n    })\n\n    it('Original path (not exists)', () => {\n      const actual = Util.uniquePathWithSequentialNumber('./XXX.md')\n      const expect = Path.resolve('./XXX.md')\n      assert(actual === expect)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/util.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "src/lib/util.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/util.test.js~describe67",
    "access": null,
    "description": "Util",
    "lineNumber": 6,
    "testTargets": [
      "Util"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "src/lib/util.test.js~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe68",
    "access": null,
    "description": "escapeRegExp",
    "lineNumber": 7
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "src/lib/util.test.js~describe67.describe68",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe68.it69",
    "access": null,
    "description": "Escape",
    "lineNumber": 8
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "src/lib/util.test.js~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe70",
    "access": null,
    "description": "existsSync",
    "lineNumber": 16,
    "testTargets": [
      "Util#existsSync"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "src/lib/util.test.js~describe67.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe70.it71",
    "access": null,
    "description": "Exists",
    "lineNumber": 17
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "src/lib/util.test.js~describe67.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe70.it72",
    "access": null,
    "description": "Not exists",
    "lineNumber": 21
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "src/lib/util.test.js~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe73",
    "access": null,
    "description": "formatDate",
    "lineNumber": 27,
    "testTargets": [
      "Util#formatDate"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "src/lib/util.test.js~describe67.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe73.it74",
    "access": null,
    "description": "Default YYYY-MM-DD hh:mm:ss.SSS",
    "lineNumber": 28
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "src/lib/util.test.js~describe67.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe73.it75",
    "access": null,
    "description": "Hyphen YYYY-MM-DD-hh-mm-ss",
    "lineNumber": 34
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "src/lib/util.test.js~describe67.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe73.it76",
    "access": null,
    "description": "No zero-padding YYYY/M/D h:m:s",
    "lineNumber": 40
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "src/lib/util.test.js~describe67.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe73.it77",
    "access": null,
    "description": "NaN",
    "lineNumber": 46
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "src/lib/util.test.js~describe67",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe78",
    "access": null,
    "description": "uniquePathWithSequentialNumber",
    "lineNumber": 54,
    "testTargets": [
      "Util#uniquePathWithSequentialNumber"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "src/lib/util.test.js~describe67.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe78.it79",
    "access": null,
    "description": "Unique path: directory",
    "lineNumber": 55
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "src/lib/util.test.js~describe67.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe78.it80",
    "access": null,
    "description": "Unique path: file",
    "lineNumber": 61
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "src/lib/util.test.js~describe67.describe78",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/util.test.js~describe67.describe78.it81",
    "access": null,
    "description": "Original path (not exists)",
    "lineNumber": 67
  },
  {
    "__docId__": 231,
    "kind": "testFile",
    "name": "src/lib/wpxml2md.test.js",
    "content": "import assert from 'assert'\nimport Rewire from 'rewire'\n\n/** @test {WordPressXmlToMarkdown} */\ndescribe('WordPressXmlToMarkdown', () => {\n  const Module = Rewire('./wpxml2md.js')\n\n  /** @test {replaceLinkURL} */\n  describe('replaceLinkURL', () => {\n    const replaceLinkURL = Module.__get__('replaceLinkURL')\n\n    it('\"/\"', () => {\n      const text = 'text\\n[alt](http://example.com/test/ \"title\")\\ntext'\n\n      const actual = replaceLinkURL(text, 'http://example.com/', '/')\n      const expected = 'text\\n[alt](/test/ \"title\")\\ntext'\n      assert(actual === expected)\n    })\n  })\n\n  describe('createExcerpt', () => {\n    const createExcerpt = Module.__get__('createExcerpt')\n\n    it('Normal', () => {\n      const markdown =\n`\n# 見出し\n\n文章文章**文章文章文章**文章文章文章[aaa](http://example.com)文章文章文章文章\n\n|ヘッダー|ヘッダー|\n|---|---|\n|値|値|\n\n## 見出し 2\n\n![ZZZ](sample.png)\n\nSentence__Sentence__Sentence\"Sentence\"Sentence\n\n* a\n* b\n\n## 見出し 2\n\n1. a\n2. b\n3. c\n\n111.\n\n> 引用\n> 引用\n\n42SentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentenceSentence\n`\n      const actual = createExcerpt(markdown)\n      const expected = '文章文章文章文章文章文章文章文章aaa文章文章文章文章ZZZSentenceSentenceSentence\\\\\"Sentence\\\\\"Sentence111.42SentenceSentenceSen...'\n      assert(actual === expected)\n    })\n\n    it('Empty', () => {\n      const actual = createExcerpt()\n      const expected = ''\n      assert(actual === expected)\n    })\n  })\n\n  /** @test {createMetadataHeader} */\n  describe('createMetadataHeader', () => {\n    const createMetadataHeader = Module.__get__('createMetadataHeader')\n\n    it('Post page', () => {\n      const metadata = {\n        type: 'post',\n        year: '2018',\n        month: '06',\n        day: '25',\n        time: '15:03:20',\n        permanentName: 'sample',\n        title: 'Sample post',\n        categories: ['Sample'],\n        tags: ['Sample', 'wpxml2md']\n      }\n\n      const actual = createMetadataHeader(metadata)\n      const expected =\n`---\npath: \"/posts/2018/06/sample/\"\ndate: \"2018-06-25T15:03:20Z\"\ntitle: \"Sample post\"\ncategories: [\"Sample\"]\ntags: [\"Sample\", \"wpxml2md\"]\nexcerpt: \"\"\n---\n\n`\n      assert(actual === expected)\n    })\n\n    it('Single page', () => {\n      const metadata = {\n        type: 'page',\n        year: '2018',\n        month: '06',\n        day: '25',\n        time: '18:03:20',\n        permanentName: 'sample',\n        title: 'Sample page',\n        categories: ['Sample'],\n        tags: ['Sample', 'wpxml2md']\n      }\n\n      const actual = createMetadataHeader(metadata)\n      const expected =\n`---\npath: \"/pages/2018/06/sample/\"\ndate: \"2018-06-25T18:03:20Z\"\ntitle: \"Sample page\"\ncategories: [\"Sample\"]\ntags: [\"Sample\", \"wpxml2md\"]\nexcerpt: \"\"\nsingle: true\n---\n\n`\n      assert(actual === expected)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/Users/akabeko/Documents/dev/node/wpxml2md/src/lib/wpxml2md.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "src/lib/wpxml2md.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82",
    "access": null,
    "description": "WordPressXmlToMarkdown",
    "lineNumber": 5,
    "testTargets": [
      "WordPressXmlToMarkdown"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "src/lib/wpxml2md.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe83",
    "access": null,
    "description": "replaceLinkURL",
    "lineNumber": 9,
    "testTargets": [
      "replaceLinkURL"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "src/lib/wpxml2md.test.js~describe82.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe83.it84",
    "access": null,
    "description": "\"/\"",
    "lineNumber": 12
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "src/lib/wpxml2md.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe85",
    "access": null,
    "description": "createExcerpt",
    "lineNumber": 21
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "src/lib/wpxml2md.test.js~describe82.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe85.it86",
    "access": null,
    "description": "Normal",
    "lineNumber": 24
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "src/lib/wpxml2md.test.js~describe82.describe85",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe85.it87",
    "access": null,
    "description": "Empty",
    "lineNumber": 62
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "src/lib/wpxml2md.test.js~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe88",
    "access": null,
    "description": "createMetadataHeader",
    "lineNumber": 70,
    "testTargets": [
      "createMetadataHeader"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "src/lib/wpxml2md.test.js~describe82.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe88.it89",
    "access": null,
    "description": "Post page",
    "lineNumber": 73
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "src/lib/wpxml2md.test.js~describe82.describe88",
    "testDepth": 2,
    "static": true,
    "longname": "src/lib/wpxml2md.test.js~describe82.describe88.it90",
    "access": null,
    "description": "Single page",
    "lineNumber": 101
  }
]